// ---------------------------------------------------------------------
//
// Copyright (C) 2004 - 2015 by the deal.II authors
//
// This file is part of the deal.II library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE at
// the top level of the deal.II distribution.
//
// ---------------------------------------------------------------------


// test the Trilinos CG solver. this test is extracted from ASPECT and
// shows a convergence failure with CG preconditioned by ILU for a
// perfectly SPD matrix (25x25, condition number around 15, nothing
// singular about it). the solver fails if we preset the solution
// vector. it succeeds if we set the solution vector to zero before
// passing it to the solver
//
// it turns out that the preconditioner doesn't actually make a
// difference, so we here use an identity preconditioner -- the solver
// fails nonetheless

#include "../tests.h"
#include <deal.II/base/utilities.h>
#include "../lac/testmatrix.h"
#include <cmath>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <deal.II/base/logstream.h>
#include <deal.II/lac/trilinos_sparse_matrix.h>
#include <deal.II/lac/trilinos_vector.h>
#include <deal.II/lac/trilinos_solver.h>
#include <deal.II/lac/trilinos_precondition.h>
#include <deal.II/lac/solver_cg.h>
#include <deal.II/lac/precondition.h>
#include <deal.II/lac/vector_memory.h>
#include <typeinfo>

struct Entry
{
  int pos[2];
  double val;
};
Entry entries[] = {{{             0,             0},       69.44444444444441    },
	       {{             0,             1},       34.72222222222222    },
	       {{             0,             2},       34.72222222222221    },
	       {{             0,             3},       17.36111111111111    },
	       {{             1,             0},       34.72222222222222    },
	       {{             1,             1},       138.8888888888888    },
	       {{             1,             2},       17.36111111111111    },
	       {{             1,             3},        69.4444444444444    },
	       {{             1,             4},       34.72222222222222    },
	       {{             1,             5},       17.36111111111111    },
	       {{             2,             0},       34.72222222222221    },
	       {{             2,             1},       17.36111111111111    },
	       {{             2,             2},       138.8888888888887    },
	       {{             2,             3},        69.4444444444444    },
	       {{             2,             6},       34.72222222222221    },
	       {{             2,             7},       17.36111111111111    },
	       {{             3,             0},       17.36111111111111    },
	       {{             3,             1},        69.4444444444444    },
	       {{             3,             2},        69.4444444444444    },
	       {{             3,             3},       277.7777777777774    },
	       {{             3,             4},       17.36111111111111    },
	       {{             3,             5},        69.4444444444444    },
	       {{             3,             6},       17.36111111111111    },
	       {{             3,             7},        69.4444444444444    },
	       {{             3,             8},       17.36111111111111    },
	       {{             4,             1},       34.72222222222222    },
	       {{             4,             3},       17.36111111111111    },
	       {{             4,             4},       138.8888888888888    },
	       {{             4,             5},        69.4444444444444    },
	       {{             4,             9},       34.72222222222226    },
	       {{             4,            10},       17.36111111111114    },
	       {{             5,             1},       17.36111111111111    },
	       {{             5,             3},        69.4444444444444    },
	       {{             5,             4},        69.4444444444444    },
	       {{             5,             5},       277.7777777777774    },
	       {{             5,             7},       17.36111111111111    },
	       {{             5,             8},       69.44444444444439    },
	       {{             5,             9},       17.36111111111114    },
	       {{             5,            10},       69.44444444444451    },
	       {{             5,            13},       17.36111111111114    },
	       {{             6,             2},       34.72222222222221    },
	       {{             6,             3},       17.36111111111111    },
	       {{             6,             6},       138.8888888888888    },
	       {{             6,             7},       69.44444444444439    },
	       {{             6,            15},       34.72222222222225    },
	       {{             6,            16},       17.36111111111113    },
	       {{             7,             2},       17.36111111111111    },
	       {{             7,             3},        69.4444444444444    },
	       {{             7,             5},       17.36111111111111    },
	       {{             7,             6},       69.44444444444439    },
	       {{             7,             7},       277.7777777777774    },
	       {{             7,             8},        69.4444444444444    },
	       {{             7,            15},       17.36111111111113    },
	       {{             7,            16},       69.44444444444446    },
	       {{             7,            17},       17.36111111111114    },
	       {{             8,             3},       17.36111111111111    },
	       {{             8,             5},       69.44444444444439    },
	       {{             8,             7},        69.4444444444444    },
	       {{             8,             8},       277.7777777777774    },
	       {{             8,            10},       17.36111111111114    },
	       {{             8,            13},       69.44444444444449    },
	       {{             8,            16},       17.36111111111114    },
	       {{             8,            17},       69.44444444444444    },
	       {{             8,            21},       17.36111111111116    },
	       {{             9,             4},       34.72222222222226    },
	       {{             9,             5},       17.36111111111114    },
	       {{             9,             9},       138.8888888888888    },
	       {{             9,            10},       69.44444444444436    },
	       {{             9,            11},       34.72222222222229    },
	       {{             9,            12},       17.36111111111114    },
	       {{            10,             4},       17.36111111111114    },
	       {{            10,             5},       69.44444444444451    },
	       {{            10,             8},       17.36111111111114    },
	       {{            10,             9},       69.44444444444436    },
	       {{            10,            10},       277.7777777777774    },
	       {{            10,            11},       17.36111111111114    },
	       {{            10,            12},       69.44444444444451    },
	       {{            10,            13},       69.44444444444434    },
	       {{            10,            14},       17.36111111111115    },
	       {{            11,             9},       34.72222222222229    },
	       {{            11,            10},       17.36111111111114    },
	       {{            11,            11},       69.44444444444441    },
	       {{            11,            12},       34.72222222222229    },
	       {{            12,             9},       17.36111111111114    },
	       {{            12,            10},       69.44444444444451    },
	       {{            12,            11},       34.72222222222229    },
	       {{            12,            12},       138.8888888888889    },
	       {{            12,            13},       17.36111111111115    },
	       {{            12,            14},       34.72222222222229    },
	       {{            13,             5},       17.36111111111114    },
	       {{            13,             8},       69.44444444444449    },
	       {{            13,            10},       69.44444444444434    },
	       {{            13,            12},       17.36111111111115    },
	       {{            13,            13},       277.7777777777774    },
	       {{            13,            14},       69.44444444444449    },
	       {{            13,            17},       17.36111111111116    },
	       {{            13,            21},       69.44444444444441    },
	       {{            13,            22},       17.36111111111116    },
	       {{            14,            10},       17.36111111111115    },
	       {{            14,            12},       34.72222222222229    },
	       {{            14,            13},       69.44444444444449    },
	       {{            14,            14},       138.8888888888889    },
	       {{            14,            21},       17.36111111111116    },
	       {{            14,            22},       34.72222222222231    },
	       {{            15,             6},       34.72222222222225    },
	       {{            15,             7},       17.36111111111113    },
	       {{            15,            15},       138.8888888888889    },
	       {{            15,            16},       69.44444444444441    },
	       {{            15,            18},       34.72222222222225    },
	       {{            15,            19},       17.36111111111114    },
	       {{            16,             6},       17.36111111111113    },
	       {{            16,             7},       69.44444444444446    },
	       {{            16,             8},       17.36111111111114    },
	       {{            16,            15},       69.44444444444441    },
	       {{            16,            16},       277.7777777777775    },
	       {{            16,            17},        69.4444444444444    },
	       {{            16,            18},       17.36111111111114    },
	       {{            16,            19},       69.44444444444449    },
	       {{            16,            20},       17.36111111111115    },
	       {{            17,             7},       17.36111111111114    },
	       {{            17,             8},       69.44444444444444    },
	       {{            17,            13},       17.36111111111116    },
	       {{            17,            16},        69.4444444444444    },
	       {{            17,            17},       277.7777777777774    },
	       {{            17,            19},       17.36111111111115    },
	       {{            17,            20},       69.44444444444446    },
	       {{            17,            21},       69.44444444444451    },
	       {{            17,            23},       17.36111111111117    },
	       {{            18,            15},       34.72222222222225    },
	       {{            18,            16},       17.36111111111114    },
	       {{            18,            18},       69.44444444444443    },
	       {{            18,            19},       34.72222222222229    },
	       {{            19,            15},       17.36111111111114    },
	       {{            19,            16},       69.44444444444449    },
	       {{            19,            17},       17.36111111111115    },
	       {{            19,            18},       34.72222222222229    },
	       {{            19,            19},       138.8888888888889    },
	       {{            19,            20},       34.72222222222229    },
	       {{            20,            16},       17.36111111111115    },
	       {{            20,            17},       69.44444444444446    },
	       {{            20,            19},       34.72222222222229    },
	       {{            20,            20},       138.8888888888889    },
	       {{            20,            21},       17.36111111111117    },
	       {{            20,            23},       34.72222222222235    },
	       {{            21,             8},       17.36111111111116    },
	       {{            21,            13},       69.44444444444441    },
	       {{            21,            14},       17.36111111111116    },
	       {{            21,            17},       69.44444444444451    },
	       {{            21,            20},       17.36111111111117    },
	       {{            21,            21},       277.7777777777775    },
	       {{            21,            22},       69.44444444444453    },
	       {{            21,            23},       69.44444444444443    },
	       {{            21,            24},       17.36111111111118    },
	       {{            22,            13},       17.36111111111116    },
	       {{            22,            14},       34.72222222222231    },
	       {{            22,            21},       69.44444444444453    },
	       {{            22,            22},       138.8888888888888    },
	       {{            22,            23},       17.36111111111118    },
	       {{            22,            24},       34.72222222222232    },
	       {{            23,            17},       17.36111111111117    },
	       {{            23,            20},       34.72222222222235    },
	       {{            23,            21},       69.44444444444443    },
	       {{            23,            22},       17.36111111111118    },
	       {{            23,            23},       138.8888888888889    },
	       {{            23,            24},       34.72222222222234    },
	       {{            24,            21},       17.36111111111118    },
	       {{            24,            22},       34.72222222222232    },
	       {{            24,            23},       34.72222222222234    },
		   {{            24,            24},       69.44444444444466}   
};
const unsigned int n_entries = sizeof(entries)/sizeof(entries[0]);

const double sol_values[25] = {-5.1164313631722855e-04, 2.9119923746454397e-04, 1.3980651247934555e-04, -1.5160868567623938e-04, -4.1291527881923997e-04, -2.8049308079595845e-04, 4.5369924223222631e-05, -6.0255388216697306e-06, -8.7942557769514894e-05, 1.5377075525266134e-05, 9.6989109376069714e-05, 3.1625724277461082e-06, 1.8447561219268093e-04, 9.5765250439970915e-05, -5.3218536306642191e-07, 1.1791680291182692e-04, 7.9782182100800005e-05, 1.1951064261260482e-04, 5.6205326614330276e-05, 3.5035691228840068e-05, -9.7040832236957543e-06, 4.0497283390623958e-05, -2.8021307149695518e-05, 2.3709824602719846e-05, 2.2941165265195198e-05};

const double f_values[25] = {0.0000000000000000e+00, 8.7688611777869719e-12, 5.3962222632535214e-12, -2.6981111316267607e-12, 4.0471666974401411e-12, -5.9358444895788729e-12, 1.0792444526507042e-12, -7.0150889422295776e-12, 2.6981111316267607e-12, -1.0792444526507043e-11, -7.5547111685549291e-12, 1.0792444526507042e-12, 3.2377333579521126e-12, 5.3962222632535214e-12, 9.7132000738563383e-12, -5.3962222632535210e-13, -1.3490555658133803e-13, 6.7452778290669010e-12, 2.1584889053014084e-12, -5.3962222632535210e-13, 5.1264111500908449e-12, 3.2377333579521126e-12, -7.0150889422295776e-12, -1.6188666789760563e-12, 1.6188666789760563e-12
};




int main(int argc, char **argv)
{
  std::ofstream logfile("output");
  logfile.precision(4);
  deallog.attach(logfile);
  deallog.depth_console(0);
  deallog.threshold_double(1.e-10);

  Utilities::MPI::MPI_InitFinalize mpi_initialization (argc, argv, numbers::invalid_unsigned_int);


  {
    // set up matrix and rhs according to the data above
    const unsigned int size = 25;
    CompressedSimpleSparsityPattern csp (size,size);
    for (unsigned int i=0; i<n_entries; ++i)
      csp.add(entries[i].pos[0], entries[i].pos[1]);
    
    TrilinosWrappers::SparseMatrix  A;
    A.reinit(csp);
    for (unsigned int i=0; i<n_entries; ++i)
      A.set(entries[i].pos[0], entries[i].pos[1], entries[i].val);
    A.compress (VectorOperation::insert);

    TrilinosWrappers::Vector  f(size);
    for (unsigned int i=0; i<size; ++i)
      f(i) = f_values[i];
    f.compress (VectorOperation::insert);
    

    // then try to solve with this matrix and the vectors defined
    // above. at the time of writing this, the Trilinos solver
    // inexplicably fails
    deallog << "Trying deal.II solver:" << std::endl;
    try
      {
	TrilinosWrappers::Vector  u(size);
	for (unsigned int i=0; i<size; ++i)
	  u(i) = sol_values[i];
	u.compress (VectorOperation::insert);

	const double tol = 1e-6*f.l2_norm(); // 2.594609498902092e-17; 
	SolverControl control(1000, tol);
	
	PreconditionIdentity preconditioner;
	
	SolverCG<TrilinosWrappers::Vector> solver(control);
	solver.solve(A,u,f,preconditioner);

	deallog << "Solver stopped after " << control.last_step()
		<< " iterations" << std::endl;
      }
    catch (std::exception &e)
      {
	deallog << e.what() << std::endl;
	abort ();
      }
    
    
    deallog << "Trying Trilinos solver:" << std::endl;
    try
      {
	TrilinosWrappers::Vector  u(size);
	for (unsigned int i=0; i<size; ++i)
	  u(i) = sol_values[i];
	u.compress (VectorOperation::insert);

	const double tol = 1e-6*f.l2_norm(); // 2.594609498902092e-17; 
	SolverControl control(1000, tol);
	
	TrilinosWrappers::PreconditionIdentity preconditioner;
	TrilinosWrappers::SolverCG solver(control);
	solver.solve(A,u,f,preconditioner);

	deallog << "Solver stopped after " << control.last_step()
		<< " iterations" << std::endl;
      }
    catch (std::exception &e)
      {
	deallog << e.what() << std::endl;
	abort ();
      }

  }
}

