// ------------------------------------------------------------------------
//
// SPDX-License-Identifier: LGPL-2.1-or-later
// Copyright (C) 2003 - 2024 by the deal.II authors
//
// This file is part of the deal.II library.
//
// Part of the source code is dual licensed under Apache-2.0 WITH
// LLVM-exception OR LGPL-2.1-or-later. Detailed license information
// governing the source code and code contributions can be found in
// LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.
//
// ------------------------------------------------------------------------



// test the output generated by
// ParameterHandler::print_parameters(LaTeX). like the _4a test, but
// deprecates the parameters.

#include <deal.II/base/parameter_handler.h>

#include "../tests.h"

// header for chdir is platform dependent; when the day comes that we support
// Windows in the test suite then conditionally include direction.h
#include <unistd.h>

int
main()
{
  initlog();

  // We need a local path for the file to get consistent output messages.
  const int chdir_return_code = chdir(SOURCE_DIR);
  AssertThrow(chdir_return_code == 0, ExcInternalError());

  ParameterHandler prm;

  try
    {
      prm.enter_subsection("Testing");
      {
        prm.enter_subsection("Testing 2");
        {
          prm.declare_entry("string list 2",
                            "a",
                            Patterns::List(
                              Patterns::Selection("a|b|c|d|e|f|g|h")),
                            "docs 1");
          prm.declare_entry("int 2", "1", Patterns::Integer());
          prm.declare_entry("double 2",
                            "3.1415926",
                            Patterns::Double(),
                            "docs 3");
          prm.mark_as_deprecated("string list 2");
          prm.mark_as_deprecated("int 2");
          prm.mark_as_deprecated("double 2");
        }
        prm.leave_subsection();

        prm.declare_entry("string list",
                          "a",
                          Patterns::List(
                            Patterns::Selection("a|b|c|d|e|f|g|h")),
                          "docs 1");
        prm.declare_entry("int", "1", Patterns::Integer());
        prm.declare_entry("double", "3.1415926", Patterns::Double(), "docs 3");
        prm.mark_as_deprecated("string list");
        prm.mark_as_deprecated("int");
        prm.mark_as_deprecated("double");
      }
      prm.leave_subsection();

      // read and then write
      // parameters. take same input file
      // as for parameter_handler_3, but
      // use different output format
      prm.parse_input("prm/parameter_handler_3.prm");
      prm.print_parameters(std::cout, ParameterHandler::LaTeX);
    }
  catch (const ParameterHandler::ExcEncounteredDeprecatedEntries &exc)
    {
      deallog << exc.get_exc_name() << std::endl;

      // Filter out compiler-dependent information
      std::stringstream tmp;
      exc.print_info(tmp);
      std::string filtered_error = tmp.str();
      size_t      function_begin = filtered_error.find("in function");

      while (function_begin != filtered_error.npos)
        {
          size_t additional_begin =
            filtered_error.find("Additional", function_begin);
          filtered_error = filtered_error.substr(0, function_begin) + '\n' +
                           filtered_error.substr(additional_begin);
          function_begin = filtered_error.find("in function");
        }
      deallog << filtered_error;

      // Check that the deprecated entries are still accessible.
      prm.enter_subsection("Testing");
      {
        deallog << prm.get("string list") << std::endl;
        deallog << prm.get("int") << std::endl;
      }
      prm.leave_subsection();
    }
  catch (...)
    {
      deallog << std::endl
              << std::endl
              << "----------------------------------------------------"
              << std::endl;
      deallog << "Unknown exception!" << std::endl
              << "Aborting!" << std::endl
              << "----------------------------------------------------"
              << std::endl;
      return 1;
    };

  return 0;
}
