<i>
This program was contributed by Maximilian Bergbauer. Many ideas presented here are the result of common code
development with Martin Kronbichler and Peter Munch.

The material is based upon the work "High-performance matrix-free unfitted finite element operator evaluation" @cite bergbauer2024
by Maximilian Bergbauer, Peter Munch, Wolfgang A. Wall, and Martin Kronbichler supported by the German Research
Foundation (DFG) under the project
“High-Performance Cut Discontinuous Galerkin Methods for Flow Problems and Surface-Coupled Multiphysics Problems”
 Grant Agreement No. 456365667.
</i>

<a name="step_95-Intro"></a>
<h1>Introduction</h1>

<h3>Matrix-free Cut Finite Element Method / Discontinuous Galerkin Method</h3>

In this example, we show the use of the matrix-free framework for the cut finite element method (CutFEM) and
the cut discontinuous Galerkin method (CutDG) in deal.II. This tutorial is based on step-85. Please read the
introduction there for details about the level-set discretization, quadrature generation (with
NonMatching::QuadratureGenerator) and mesh classification (with NonMatching::MeshClassifier) before starting with this
tutorial.
We choose the same problem like step-85, Poisson's equation:
@f{align*}{
  -\Delta u &= f \qquad && \text{in }\, \Omega,
  \\
  u &= u_D       \qquad && \text{on }\, \Gamma_D = \partial \Omega,
@f}
where we choose $f(x) = 4$ and $u_D(x) = 0$.

With CutFEM/CutDG this leads to the following weak formulation:
Find $u_h \in V_\Omega^h$ such that
@f{equation*}{
  a_h(u_h, v_h) = L_h(v_h), \quad \forall v_h \in V_\Omega^h,
@f}
where
@f{align*}{
  a_{h,CG}(u_h, v_h) &=  (\nabla u_h, \nabla v_h)_\Omega
                       - (u_h, \partial_n v_h)_{\Gamma_D}
                       - \left (\partial_n u_h - \gamma_D h^{-1} u_h, v_h \right )_{\Gamma_D}
                       + g_h(u_h, v_h),
  \\
  L_h(v_h)      &=  (f,v)_\Omega
                  + \left (u_D, \gamma_D h^{-1} v_h -\partial_n v_h \right )_{\Gamma_D},
@f}
where $g_h$ is the ghost penalty stabilization that circumvents the small cut cell problem.

For the discontinuous Galerkin variant (CutDG) we get an additional SIPG flux term on interior faces:
@f{equation*}{
  a_{h,DG}(u_h, v_h) = a_{h,CG}(u_h, v_h)
  - (\jump{u_h}, \average{\partial_n v_h})_{\Gamma_{int}} -
  (\average{\partial_n u_h} - \gamma_{SIPG}h^{-1}\jump{u_h}, \jump{v_h})_{\Gamma_{int}}
@f}

The ghost penalty is defined as:
@f{equation*}{
  g_h(u_h,v_h) = \sum_{F \in \mathcal{F}_h} \sum_{j=0}^p \gamma_{GP,j} \left(h_F^{2j-1}[\partial_n^j u_h], [\partial_n^j v_h] \right)_F
@f}
over faces $F\in\mathcal{F}_h$ between intersected cells and intersected and inside cells. In this tutorial it is
implemented for degree $p\leq 2$.

The terms arising in the weak form are implemented matrix-free
@f{equation*}{
  y=A(u)=\sum_{cell=1}^{n_{cells}}A_{cell}(u)+\sum_{face=1}^{n_{faces}}A_{face}(u)
@f}
with FEEvaluation for inside cells, FEPointEvaluation
for intersected cells, FEFaceEvaluation for SIPG fluxes on inside faces and ghost penalty terms, and
FEFacePointEvaluation for SIPG fluxes on intersected faces. The FEEvaluation and FEFaceEvaluation evaluators are used
for integrals with standard Gaussian quadrature and FEPointEvaluation and FEFacePointEvaluation for quadratures
generated by NonMatching::DiscreteQuadratureGenerator. These quadratures are provided to the point evaluators by
NonMatching::MappingInfo objects for the respective entities.
