<h1>Results</h1>


There is not much to be said about the results of this program, other than
that they look nice. All images were made using VisIt from the
output files that the program wrote to disk. The first two pictures show
the $x$- and $y$-displacements as scalar components:

<table width="100%">
<tr>
<td>
<img src="https://dealii.org/images/steps/developer/step-8.x.png" alt="">
</td>
<td>
<img src="https://dealii.org/images/steps/developer/step-8.y.png" alt="">
</td>
</tr>
</table>


You can clearly see the sources of $x$-displacement around $x=0.5$ and
$x=-0.5$, and of $y$-displacement at the origin.


<a name="step-8-extensions"></a>
<h3>Possibilities for extensions</h3>

What one frequently would like to do is to show the displacement as a vector
field, i.e., vectors that for each point illustrate the direction and magnitude
of displacement. Unfortunately, that's a bit more involved. To understand why
this is so, remember that we have defined our finite element as just a
collection of `dim` individual components when we said `fe(FE_Q<dim>(1) ^ dim)`
in the constructor. From the perspective of deal.II, these components could
just be a pressure and a concentration (i.e., two scalar and unrelated
quantities). What we *want* to express somehow is that the components of the finite
element actually are the parts of a *vector-valued* quantity, namely the
displacement. Absent having specific knowledge about this, the
DataOut class assumes that all individual variables we output are separate
scalars, and VisIt and Paraview then faithfully assume that this is indeed what it is. In
other words, once we have written the data as scalars, there is nothing in
these programs that allows us to paste these two scalar fields back together as a
vector field. (This is not entirely true: It is possible to *define* a
vector-valued field in both of these programs whose components are scalar fields
that already exist in an output field; but it is not easy to find how
exactly one would do that.)

Where we would have to attack this problem is at its root,
namely in <code>ElasticProblem::output_results()</code>. The step-22 program
discussed in some detail how to do that for a more general situation. That said,
the following small variation of the `output_results()`, in which we essentially
only add the `data_component_interpretation` variable and use the same
string `"displacement"` `dim` times, will do the trick:
@code
  template <int dim>
  void ElasticProblem<dim>::output_results(const unsigned int cycle) const
  {
    DataOut<dim> data_out;
    data_out.attach_dof_handler(dof_handler);

    const std::vector<std::string> solution_names(dim, "displacement");

    const std::vector<DataComponentInterpretation::DataComponentInterpretation>
      data_component_interpretation(
        dim, DataComponentInterpretation::component_is_part_of_vector);

    data_out.add_data_vector(solution,
                             solution_names,
                             DataOut<dim>::type_dof_data,
                             data_component_interpretation);
    data_out.build_patches();

    std::ofstream output("solution-" + std::to_string(cycle) + ".vtk");
    data_out.write_vtk(output);
  }
@endcode
As mentioned, step-22 discusses what exactly this does. In any case,
the displacement vector field that is then output then looks like this
(VisIt and Paraview randomly select a few
hundred vertices from which to draw the vectors; drawing them from each
individual vertex would make the picture unreadable):

<img src="https://dealii.org/images/steps/developer/step-8.vectors.png" alt="">

We note that one may have intuitively expected the
solution to be symmetric about the $x$- and $y$-axes since the $x$- and
$y$-forces are symmetric with respect to these axes. However, the force
considered as a vector is not symmetric and consequently neither is
the solution.
