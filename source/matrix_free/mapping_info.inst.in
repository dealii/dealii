// ---------------------------------------------------------------------
//
// Copyright (C) 2018 by the deal.II authors
//
// This file is part of the deal.II library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE at
// the top level of the deal.II distribution.
//
// ---------------------------------------------------------------------


for (deal_II_dimension : DIMENSIONS)
  {
    template struct internal::MatrixFreeFunctions::MappingInfo<deal_II_dimension, double>;
    template struct internal::MatrixFreeFunctions::MappingInfo<deal_II_dimension, float>;

    template struct internal::MatrixFreeFunctions::
      MappingInfoStorage<deal_II_dimension, deal_II_dimension, double>;
    template struct internal::MatrixFreeFunctions::
      MappingInfoStorage<deal_II_dimension, deal_II_dimension, float>;
#if deal_II_dimension > 1
    template struct internal::MatrixFreeFunctions::
      MappingInfoStorage<deal_II_dimension - 1, deal_II_dimension, double>;
    template struct internal::MatrixFreeFunctions::
      MappingInfoStorage<deal_II_dimension - 1, deal_II_dimension, float>;
#endif

    template void internal::MatrixFreeFunctions::MappingInfo<deal_II_dimension, double>::
      print_memory_consumption<std::ostream>(std::ostream &, const TaskInfo &) const;
    template void internal::MatrixFreeFunctions::MappingInfo<deal_II_dimension, double>::
      print_memory_consumption<ConditionalOStream>(ConditionalOStream &, const TaskInfo &) const;

    template void internal::MatrixFreeFunctions::MappingInfo<deal_II_dimension, float>::
      print_memory_consumption<std::ostream>(std::ostream &, const TaskInfo &) const;
    template void internal::MatrixFreeFunctions::MappingInfo<deal_II_dimension, float>::
      print_memory_consumption<ConditionalOStream>(ConditionalOStream &, const TaskInfo &) const;
  }
