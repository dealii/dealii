// ---------------------------------------------------------------------
//
// Copyright (C) 2010 - 2018 by the deal.II authors
//
// This file is part of the deal.II library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE.md at
// the top level directory of deal.II.
//
// ---------------------------------------------------------------------


for (deal_II_dimension : DIMENSIONS; deal_II_scalar : REAL_SCALARS)
  {
    template void internal::MatrixFreeFunctions::ShapeInfo<deal_II_scalar>::
      reinit<deal_II_dimension>(
        const Quadrature<1> &,
        const FiniteElement<deal_II_dimension, deal_II_dimension> &,
        const unsigned int);
  }



for (deal_II_dimension : DIMENSIONS;
     deal_II_scalar_vectorized : REAL_SCALARS_VECTORIZED)
  {
    template class MatrixFree<deal_II_dimension,
                              deal_II_scalar_vectorized::value_type,
                              deal_II_scalar_vectorized>;

    template void MatrixFree<deal_II_dimension,
                             deal_II_scalar_vectorized::value_type,
                             deal_II_scalar_vectorized>::
      print_memory_consumption<std::ostream>(std::ostream &) const;

    template void MatrixFree<deal_II_dimension,
                             deal_II_scalar_vectorized::value_type,
                             deal_II_scalar_vectorized>::
      print_memory_consumption<ConditionalOStream>(ConditionalOStream &) const;

    template void MatrixFree<deal_II_dimension,
                             deal_II_scalar_vectorized::value_type,
                             deal_II_scalar_vectorized>::
      internal_reinit<deal_II_scalar_vectorized::value_type>(
        const Mapping<deal_II_dimension> &,
        const std::vector<const DoFHandler<deal_II_dimension> *> &,
        const std::vector<
          const AffineConstraints<deal_II_scalar_vectorized::value_type> *> &,
        const std::vector<IndexSet> &,
        const std::vector<hp::QCollection<1>> &,
        const AdditionalData &);

    template void MatrixFree<deal_II_dimension,
                             deal_II_scalar_vectorized::value_type,
                             deal_II_scalar_vectorized>::
      internal_reinit<deal_II_scalar_vectorized::value_type>(
        const Mapping<deal_II_dimension> &,
        const std::vector<const hp::DoFHandler<deal_II_dimension> *> &,
        const std::vector<
          const AffineConstraints<deal_II_scalar_vectorized::value_type> *> &,
        const std::vector<IndexSet> &,
        const std::vector<hp::QCollection<1>> &,
        const AdditionalData &);

    template const DoFHandler<deal_II_dimension> &
    MatrixFree<deal_II_dimension,
               deal_II_scalar_vectorized::value_type,
               deal_II_scalar_vectorized>::
      get_dof_handler<DoFHandler<deal_II_dimension>>(const unsigned int) const;

    template const hp::DoFHandler<deal_II_dimension>
      &MatrixFree<deal_II_dimension,
                  deal_II_scalar_vectorized::value_type,
                  deal_II_scalar_vectorized>::
        get_dof_handler<hp::DoFHandler<deal_II_dimension>>(const unsigned int)
          const;

    template void internal::MatrixFreeFunctions::
      ShapeInfo<deal_II_scalar_vectorized>::reinit<deal_II_dimension>(
        const Quadrature<1> &,
        const FiniteElement<deal_II_dimension, deal_II_dimension> &,
        const unsigned int);
  }


for (deal_II_dimension : DIMENSIONS;
     deal_II_float_vectorized : FLOAT_VECTORIZED)
  {
    template void MatrixFree<deal_II_dimension,
                             deal_II_float_vectorized::value_type,
                             deal_II_float_vectorized>::
      internal_reinit<double>(
        const Mapping<deal_II_dimension> &,
        const std::vector<const DoFHandler<deal_II_dimension> *> &,
        const std::vector<const AffineConstraints<double> *> &,
        const std::vector<IndexSet> &,
        const std::vector<hp::QCollection<1>> &,
        const AdditionalData &);

    template void MatrixFree<deal_II_dimension,
                             deal_II_float_vectorized::value_type,
                             deal_II_float_vectorized>::
      internal_reinit<double>(
        const Mapping<deal_II_dimension> &,
        const std::vector<const hp::DoFHandler<deal_II_dimension> *> &,
        const std::vector<const AffineConstraints<double> *> &,
        const std::vector<IndexSet> &,
        const std::vector<hp::QCollection<1>> &,
        const AdditionalData &);
  }


for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS;
     deal_II_scalar_vectorized : REAL_SCALARS_VECTORIZED)
  {
#if deal_II_dimension <= deal_II_space_dimension
    template bool MatrixFree<deal_II_dimension,
                             deal_II_scalar_vectorized::value_type,
                             deal_II_scalar_vectorized>::
      is_supported(
        const FiniteElement<deal_II_dimension, deal_II_space_dimension> &);
#endif
  }

for (deal_II_scalar_vectorized : REAL_SCALARS_VECTORIZED)
  {
    template struct internal::MatrixFreeFunctions::ShapeInfo<
      deal_II_scalar_vectorized>;
  }
