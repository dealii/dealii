// ---------------------------------------------------------------------
//
// Copyright (C) 1998 - 2014 by the deal.II authors
//
// This file is part of the deal.II library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE at
// the top level of the deal.II distribution.
//
// ---------------------------------------------------------------------



for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension :  SPACE_DIMENSIONS; Vector : SERIAL_VECTORS)
  {
    namespace FETools
      \{
#if deal_II_dimension <= deal_II_space_dimension
      template
	void interpolate<deal_II_dimension,deal_II_space_dimension>
	(const DoFHandler<deal_II_dimension,deal_II_space_dimension> &, const Vector &,
	 const DoFHandler<deal_II_dimension,deal_II_space_dimension> &, Vector &);

      template
	void interpolate<deal_II_dimension,deal_II_space_dimension>
	(const DoFHandler<deal_II_dimension,deal_II_space_dimension> &, const Vector &,
	 const DoFHandler<deal_II_dimension,deal_II_space_dimension> &, const ConstraintMatrix &,
	 Vector &);
#endif
      \}
  }

for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension :  SPACE_DIMENSIONS)
  {
    namespace FETools
      \{
#if deal_II_dimension == deal_II_space_dimension
      template
	void interpolate<deal_II_dimension>
	(const hp::DoFHandler<deal_II_dimension> &, const Vector<double> &,
	 const hp::DoFHandler<deal_II_dimension> &, Vector<double> &);
      template
	void interpolate<deal_II_dimension>
	(const hp::DoFHandler<deal_II_dimension> &, const Vector<double> &,
	 const hp::DoFHandler<deal_II_dimension> &, const ConstraintMatrix &,
	 Vector<double> &);
      template
	void interpolate<deal_II_dimension>
	(const hp::DoFHandler<deal_II_dimension> &, const Vector<float> &,
	 const hp::DoFHandler<deal_II_dimension> &, Vector<float> &);
      template
	void interpolate<deal_II_dimension>
	(const hp::DoFHandler<deal_II_dimension> &, const Vector<float> &,
	 const hp::DoFHandler<deal_II_dimension> &, const ConstraintMatrix &,
	 Vector<float> &);
#endif
      \}
  }



for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension :  SPACE_DIMENSIONS; VEC : SERIAL_VECTORS)
  {
    namespace FETools
      \{
#if deal_II_dimension == deal_II_space_dimension
     template
	void back_interpolate<deal_II_dimension>
	(const DoFHandler<deal_II_dimension> &, const VEC &,
	 const FiniteElement<deal_II_dimension> &, VEC &);
      template
	void back_interpolate<deal_II_dimension>
	(const DoFHandler<deal_II_dimension> &, const ConstraintMatrix &,
	 const VEC &,
	 const DoFHandler<deal_II_dimension> &, const ConstraintMatrix &,
	 VEC &);
      template
	void interpolation_difference<deal_II_dimension>
	(const DoFHandler<deal_II_dimension> &, const VEC &,
	 const FiniteElement<deal_II_dimension> &, VEC &);
      template
	void interpolation_difference<deal_II_dimension>
	(const DoFHandler<deal_II_dimension> &, const ConstraintMatrix &,
	 const VEC &,
	 const DoFHandler<deal_II_dimension> &, const ConstraintMatrix &,
	 VEC &);
      template
	void project_dg<deal_II_dimension>
	(const DoFHandler<deal_II_dimension> &, const VEC &,
	 const DoFHandler<deal_II_dimension> &, VEC &);
      template
	void extrapolate<deal_II_dimension>
	(const DoFHandler<deal_II_dimension> &, const VEC &,
	 const DoFHandler<deal_II_dimension> &, VEC &);
      template
	void extrapolate<deal_II_dimension>
	(const DoFHandler<deal_II_dimension> &, const VEC &,
	 const DoFHandler<deal_II_dimension> &, const ConstraintMatrix &,
	 VEC &);
#endif
      \}
  }
