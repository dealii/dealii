// ------------------------------------------------------------------------
//
// SPDX-License-Identifier: LGPL-2.1-or-later
// Copyright (C) 2016 - 2018 by the deal.II authors
//
// This file is part of the deal.II library.
//
// Part of the source code is dual licensed under Apache-2.0 WITH
// LLVM-exception OR LGPL-2.1-or-later. Detailed license information
// governing the source code and code contributions can be found in
// LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.
//
// ------------------------------------------------------------------------


for (deal_II_dimension : DIMENSIONS; number : REAL_SCALARS)
  {
    namespace Physics
    \{
      namespace Transformations
      \{
        template Tensor<1, deal_II_dimension, number>
        nansons_formula(const Tensor<1, deal_II_dimension, number> &,
                        const Tensor<2, deal_II_dimension, number> &);

        namespace Contravariant
        \{
          template Tensor<1, deal_II_dimension, number>
          push_forward(const Tensor<1, deal_II_dimension, number> &,
                       const Tensor<2, deal_II_dimension, number> &);

          template Tensor<2, deal_II_dimension, number>
          push_forward(const Tensor<2, deal_II_dimension, number> &,
                       const Tensor<2, deal_II_dimension, number> &);

          template SymmetricTensor<2, deal_II_dimension, number>
          push_forward(const SymmetricTensor<2, deal_II_dimension, number> &,
                       const Tensor<2, deal_II_dimension, number> &);

          template Tensor<4, deal_II_dimension, number>
          push_forward(const Tensor<4, deal_II_dimension, number> &,
                       const Tensor<2, deal_II_dimension, number> &);

          template SymmetricTensor<4, deal_II_dimension, number>
          push_forward(const SymmetricTensor<4, deal_II_dimension, number> &,
                       const Tensor<2, deal_II_dimension, number> &);

          template Tensor<1, deal_II_dimension, number>
          pull_back(const Tensor<1, deal_II_dimension, number> &,
                    const Tensor<2, deal_II_dimension, number> &);

          template Tensor<2, deal_II_dimension, number>
          pull_back(const Tensor<2, deal_II_dimension, number> &,
                    const Tensor<2, deal_II_dimension, number> &);

          template SymmetricTensor<2, deal_II_dimension, number>
          pull_back(const SymmetricTensor<2, deal_II_dimension, number> &,
                    const Tensor<2, deal_II_dimension, number> &);

          template Tensor<4, deal_II_dimension, number>
          pull_back(const Tensor<4, deal_II_dimension, number> &,
                    const Tensor<2, deal_II_dimension, number> &);

          template SymmetricTensor<4, deal_II_dimension, number>
          pull_back(const SymmetricTensor<4, deal_II_dimension, number> &,
                    const Tensor<2, deal_II_dimension, number> &);
        \}

        namespace Covariant
        \{
          template Tensor<1, deal_II_dimension, number>
          push_forward(const Tensor<1, deal_II_dimension, number> &,
                       const Tensor<2, deal_II_dimension, number> &);

          template Tensor<2, deal_II_dimension, number>
          push_forward(const Tensor<2, deal_II_dimension, number> &,
                       const Tensor<2, deal_II_dimension, number> &);

          template SymmetricTensor<2, deal_II_dimension, number>
          push_forward(const SymmetricTensor<2, deal_II_dimension, number> &,
                       const Tensor<2, deal_II_dimension, number> &);

          template Tensor<4, deal_II_dimension, number>
          push_forward(const Tensor<4, deal_II_dimension, number> &,
                       const Tensor<2, deal_II_dimension, number> &);

          template SymmetricTensor<4, deal_II_dimension, number>
          push_forward(const SymmetricTensor<4, deal_II_dimension, number> &,
                       const Tensor<2, deal_II_dimension, number> &);

          template Tensor<1, deal_II_dimension, number>
          pull_back(const Tensor<1, deal_II_dimension, number> &,
                    const Tensor<2, deal_II_dimension, number> &);

          template Tensor<2, deal_II_dimension, number>
          pull_back(const Tensor<2, deal_II_dimension, number> &,
                    const Tensor<2, deal_II_dimension, number> &);

          template SymmetricTensor<2, deal_II_dimension, number>
          pull_back(const SymmetricTensor<2, deal_II_dimension, number> &,
                    const Tensor<2, deal_II_dimension, number> &);

          template Tensor<4, deal_II_dimension, number>
          pull_back(const Tensor<4, deal_II_dimension, number> &,
                    const Tensor<2, deal_II_dimension, number> &);

          template SymmetricTensor<4, deal_II_dimension, number>
          pull_back(const SymmetricTensor<4, deal_II_dimension, number> &,
                    const Tensor<2, deal_II_dimension, number> &);
        \}

        namespace Piola
        \{
          template Tensor<1, deal_II_dimension, number>
          push_forward(const Tensor<1, deal_II_dimension, number> &,
                       const Tensor<2, deal_II_dimension, number> &);

          template Tensor<2, deal_II_dimension, number>
          push_forward(const Tensor<2, deal_II_dimension, number> &,
                       const Tensor<2, deal_II_dimension, number> &);

          template SymmetricTensor<2, deal_II_dimension, number>
          push_forward(const SymmetricTensor<2, deal_II_dimension, number> &,
                       const Tensor<2, deal_II_dimension, number> &);

          template Tensor<4, deal_II_dimension, number>
          push_forward(const Tensor<4, deal_II_dimension, number> &,
                       const Tensor<2, deal_II_dimension, number> &);

          template SymmetricTensor<4, deal_II_dimension, number>
          push_forward(const SymmetricTensor<4, deal_II_dimension, number> &,
                       const Tensor<2, deal_II_dimension, number> &);

          template Tensor<1, deal_II_dimension, number>
          pull_back(const Tensor<1, deal_II_dimension, number> &,
                    const Tensor<2, deal_II_dimension, number> &);

          template Tensor<2, deal_II_dimension, number>
          pull_back(const Tensor<2, deal_II_dimension, number> &,
                    const Tensor<2, deal_II_dimension, number> &);

          template SymmetricTensor<2, deal_II_dimension, number>
          pull_back(const SymmetricTensor<2, deal_II_dimension, number> &,
                    const Tensor<2, deal_II_dimension, number> &);

          template Tensor<4, deal_II_dimension, number>
          pull_back(const Tensor<4, deal_II_dimension, number> &,
                    const Tensor<2, deal_II_dimension, number> &);

          template SymmetricTensor<4, deal_II_dimension, number>
          pull_back(const SymmetricTensor<4, deal_II_dimension, number> &,
                    const Tensor<2, deal_II_dimension, number> &);
        \}

      \}
    \}
  }
