// ------------------------------------------------------------------------
//
// SPDX-License-Identifier: LGPL-2.1-or-later
// Copyright (C) 2016 - 2018 by the deal.II authors
//
// This file is part of the deal.II library.
//
// Part of the source code is dual licensed under Apache-2.0 WITH
// LLVM-exception OR LGPL-2.1-or-later. Detailed license information
// governing the source code and code contributions can be found in
// LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.
//
// ------------------------------------------------------------------------


for (deal_II_dimension : DIMENSIONS; number : REAL_SCALARS)
  {
    namespace Physics
    \{
      namespace Elasticity
      \{
        namespace Kinematics
        \{
          template Tensor<2, deal_II_dimension, number>
          F<deal_II_dimension, number>(
            const Tensor<2, deal_II_dimension, number> &);

          template Tensor<2, deal_II_dimension, number>
          F_iso<deal_II_dimension, number>(
            const Tensor<2, deal_II_dimension, number> &);

          template SymmetricTensor<2, deal_II_dimension, number>
          F_vol<deal_II_dimension, number>(
            const Tensor<2, deal_II_dimension, number> &);

          template SymmetricTensor<2, deal_II_dimension, number>
          C<deal_II_dimension, number>(
            const Tensor<2, deal_II_dimension, number> &);

          template SymmetricTensor<2, deal_II_dimension, number>
          b<deal_II_dimension, number>(
            const Tensor<2, deal_II_dimension, number> &);

          template SymmetricTensor<2, deal_II_dimension, number>
          E<deal_II_dimension, number>(
            const Tensor<2, deal_II_dimension, number> &);

          template SymmetricTensor<2, deal_II_dimension, number>
          epsilon<deal_II_dimension, number>(
            const Tensor<2, deal_II_dimension, number> &);

          template SymmetricTensor<2, deal_II_dimension, number>
          e<deal_II_dimension, number>(
            const Tensor<2, deal_II_dimension, number> &);

          template Tensor<2, deal_II_dimension, number>
          l<deal_II_dimension, number>(
            const Tensor<2, deal_II_dimension, number> &,
            const Tensor<2, deal_II_dimension, number> &);

          template SymmetricTensor<2, deal_II_dimension, number>
          d<deal_II_dimension, number>(
            const Tensor<2, deal_II_dimension, number> &,
            const Tensor<2, deal_II_dimension, number> &);

          template Tensor<2, deal_II_dimension, number>
          w<deal_II_dimension, number>(
            const Tensor<2, deal_II_dimension, number> &,
            const Tensor<2, deal_II_dimension, number> &);
        \}
      \}
    \}
  }
