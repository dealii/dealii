// ------------------------------------------------------------------------
//
// SPDX-License-Identifier: LGPL-2.1-or-later
// Copyright (C) 2023 by the deal.II authors
//
// This file is part of the deal.II library.
//
// Part of the source code is dual licensed under Apache-2.0 WITH
// LLVM-exception OR LGPL-2.1-or-later. Detailed license information
// governing the source code and code contributions can be found in
// LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.
//
// ------------------------------------------------------------------------



for (S : MPI_SCALARS)
  {
    namespace PETScWrappers
    \{
      template void
      CommunicationPattern::export_to_ghosted_array(
        const ArrayView<const S> &src,
        const ArrayView<S>       &dst) const;

      template void
      CommunicationPattern::export_to_ghosted_array_start(
        const ArrayView<const S> &src,
        const ArrayView<S>       &dst) const;

      template void
      CommunicationPattern::export_to_ghosted_array_finish(
        const ArrayView<const S> &src,
        const ArrayView<S>       &dst) const;

      template void
      CommunicationPattern::import_from_ghosted_array(
        const VectorOperation::values op,
        const ArrayView<const S>     &src,
        const ArrayView<S>           &dst) const;

      template void
      CommunicationPattern::import_from_ghosted_array_start(
        const VectorOperation::values op,
        const ArrayView<const S>     &src,
        const ArrayView<S>           &dst) const;

      template void
      CommunicationPattern::import_from_ghosted_array_finish(
        const VectorOperation::values op,
        const ArrayView<const S>     &src,
        const ArrayView<S>           &dst) const;

      template void
      Partitioner::export_to_ghosted_array(const ArrayView<const S> &src,
                                           const ArrayView<S>       &dst) const;

      template void
      Partitioner::export_to_ghosted_array_start(const ArrayView<const S> &src,
                                                 const ArrayView<S> &dst) const;

      template void
      Partitioner::export_to_ghosted_array_finish(
        const ArrayView<const S> &src,
        const ArrayView<S>       &dst) const;

      template void
      Partitioner::import_from_ghosted_array(const VectorOperation::values op,
                                             const ArrayView<const S>     &src,
                                             const ArrayView<S> &dst) const;

      template void
      Partitioner::import_from_ghosted_array_start(
        const VectorOperation::values op,
        const ArrayView<const S>     &src,
        const ArrayView<S>           &dst) const;

      template void
      Partitioner::import_from_ghosted_array_finish(
        const VectorOperation::values op,
        const ArrayView<const S>     &src,
        const ArrayView<S>           &dst) const;
    \}
  }
