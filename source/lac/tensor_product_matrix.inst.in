// ------------------------------------------------------------------------
//
// SPDX-License-Identifier: LGPL-2.1-or-later
// Copyright (C) 2022 - 2023 by the deal.II authors
//
// This file is part of the deal.II library.
//
// Part of the source code is dual licensed under Apache-2.0 WITH
// LLVM-exception OR LGPL-2.1-or-later. Detailed license information
// governing the source code and code contributions can be found in
// LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.
//
// ------------------------------------------------------------------------


for (deal_II_dimension : DIMENSIONS;
     deal_II_scalar_vectorized : REAL_SCALARS_VECTORIZED)
  {
    template void select_vmult<1>(
      deal_II_scalar_vectorized * dst,
      const deal_II_scalar_vectorized          *src,
      AlignedVector<deal_II_scalar_vectorized> &tmp,
      const unsigned int                        n_rows,
      const std::array<const deal_II_scalar_vectorized *, deal_II_dimension>
        &mass_matrix,
      const std::array<const deal_II_scalar_vectorized *, deal_II_dimension>
        &derivative_matrix);

    template void select_apply_inverse<1>(
      deal_II_scalar_vectorized * dst,
      const deal_II_scalar_vectorized *src,
      const unsigned int               n_rows,
      const std::array<const deal_II_scalar_vectorized *, deal_II_dimension>
        &eigenvectors,
      const std::array<const deal_II_scalar_vectorized *, deal_II_dimension>
                                      &eigenvalues,
      const deal_II_scalar_vectorized *inverted_eigenvalues);
  }

for (deal_II_dimension : DIMENSIONS; deal_II_scalar : REAL_SCALARS)
  {
    template void select_vmult<1>(
      deal_II_scalar * dst,
      const deal_II_scalar                                        *src,
      AlignedVector<deal_II_scalar>                               &tmp,
      const unsigned int                                           n_rows,
      const std::array<const deal_II_scalar *, deal_II_dimension> &mass_matrix,
      const std::array<const deal_II_scalar *, deal_II_dimension>
        &derivative_matrix);

    template void select_apply_inverse<1>(
      deal_II_scalar * dst,
      const deal_II_scalar                                        *src,
      const unsigned int                                           n_rows,
      const std::array<const deal_II_scalar *, deal_II_dimension> &eigenvectors,
      const std::array<const deal_II_scalar *, deal_II_dimension> &eigenvalues,
      const deal_II_scalar *inverted_eigenvalues);
  }
