// ------------------------------------------------------------------------
//
// SPDX-License-Identifier: LGPL-2.1-or-later
// Copyright (C) 2011 - 2023 by the deal.II authors
//
// This file is part of the deal.II library.
//
// Part of the source code is dual licensed under Apache-2.0 WITH
// LLVM-exception OR LGPL-2.1-or-later. Detailed license information
// governing the source code and code contributions can be found in
// LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.
//
// ------------------------------------------------------------------------



for (SCALAR : REAL_AND_COMPLEX_SCALARS)
  {
    namespace LinearAlgebra
    \{
      namespace distributed
      \{
#ifdef DEAL_II_HAVE_CXX20
        static_assert(concepts::is_vector_space_vector<
                      Vector<SCALAR, ::dealii::MemorySpace::Host>>);
#endif

        template class Vector<SCALAR, ::dealii::MemorySpace::Host>;

        template void
        Vector<SCALAR, ::dealii::MemorySpace::Host>::import_elements<
          ::dealii::MemorySpace::Host>(
          const Vector<SCALAR, ::dealii::MemorySpace::Host> &,
          VectorOperation::values);
      \}
    \}
  }

for (S1 : REAL_AND_COMPLEX_SCALARS; S2 : REAL_SCALARS)
  {
    namespace LinearAlgebra
    \{
      namespace distributed
      \{
        template void
        Vector<S1, ::dealii::MemorySpace::Host>::reinit<S2>(
          const Vector<S2, ::dealii::MemorySpace::Host> &,
          const bool);
        template S1
        Vector<S1, ::dealii::MemorySpace::Host>::inner_product_local<S2>(
          const Vector<S2, ::dealii::MemorySpace::Host> &) const;
        template void
        Vector<S1, ::dealii::MemorySpace::Host>::copy_locally_owned_data_from<
          S2>(const Vector<S2, ::dealii::MemorySpace::Host> &);
      \}
    \}
  }


for (S1, S2 : COMPLEX_SCALARS)
  {
    namespace LinearAlgebra
    \{
      namespace distributed
      \{
        template void
        Vector<S1, ::dealii::MemorySpace::Host>::reinit<S2>(
          const Vector<S2, ::dealii::MemorySpace::Host> &,
          const bool);
        template S1
        Vector<S1, ::dealii::MemorySpace::Host>::inner_product_local<S2>(
          const Vector<S2, ::dealii::MemorySpace::Host> &) const;
        template void
        Vector<S1, ::dealii::MemorySpace::Host>::copy_locally_owned_data_from<
          S2>(const Vector<S2, ::dealii::MemorySpace::Host> &);
      \}
    \}
  }
