// ------------------------------------------------------------------------
//
// SPDX-License-Identifier: LGPL-2.1-or-later
// Copyright (C) 2011 - 2025 by the deal.II authors
//
// This file is part of the deal.II library.
//
// Part of the source code is dual licensed under Apache-2.0 WITH
// LLVM-exception OR LGPL-2.1-or-later. Detailed license information
// governing the source code and code contributions can be found in
// LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.
//
// ------------------------------------------------------------------------



for (SCALAR : REAL_AND_COMPLEX_SCALARS)
  {
    namespace LinearAlgebra
    \{
      namespace distributed
      \{
#ifdef DEAL_II_HAVE_CXX20
        static_assert(concepts::is_vector_space_vector<
                      BlockVector<SCALAR, ::dealii::MemorySpace::Host>>);
#endif

        template class BlockVector<SCALAR, ::dealii::MemorySpace::Host>;

        template void
        BlockVector<SCALAR, ::dealii::MemorySpace::Host>::
          multivector_inner_product(
            FullMatrix<SCALAR> &,
            const BlockVector<SCALAR, ::dealii::MemorySpace::Host> &V,
            const bool) const;
        template void
        BlockVector<SCALAR, ::dealii::MemorySpace::Host>::
          multivector_inner_product(
            LAPACKFullMatrix<SCALAR> &,
            const BlockVector<SCALAR, ::dealii::MemorySpace::Host> &V,
            const bool) const;
        template SCALAR
        BlockVector<SCALAR, ::dealii::MemorySpace::Host>::
          multivector_inner_product_with_metric(
            const FullMatrix<SCALAR> &,
            const BlockVector<SCALAR, ::dealii::MemorySpace::Host> &V,
            const bool) const;
        template SCALAR
        BlockVector<SCALAR, ::dealii::MemorySpace::Host>::
          multivector_inner_product_with_metric(
            const LAPACKFullMatrix<SCALAR> &,
            const BlockVector<SCALAR, ::dealii::MemorySpace::Host> &V,
            const bool) const;
        template void
        BlockVector<SCALAR, ::dealii::MemorySpace::Host>::mmult(
          BlockVector<SCALAR, ::dealii::MemorySpace::Host> &V,
          const FullMatrix<SCALAR> &,
          const SCALAR,
          const SCALAR) const;
        template void
        BlockVector<SCALAR, ::dealii::MemorySpace::Host>::mmult(
          BlockVector<SCALAR, ::dealii::MemorySpace::Host> &V,
          const LAPACKFullMatrix<SCALAR> &,
          const SCALAR,
          const SCALAR) const;
      \}
    \}
  }



for (SCALAR : REAL_SCALARS)
  {
    namespace LinearAlgebra
    \{
      namespace distributed
      \{
#ifdef DEAL_II_HAVE_CXX20
        static_assert(concepts::is_vector_space_vector<
                      BlockVector<SCALAR, ::dealii::MemorySpace::Default>>);
#endif

        template class BlockVector<SCALAR, ::dealii::MemorySpace::Default>;
      \}
    \}
  }



for (S1 : REAL_AND_COMPLEX_SCALARS; S2 : REAL_SCALARS)
  {
    namespace LinearAlgebra
    \{
      namespace distributed
      \{
        template void
        BlockVector<S1, ::dealii::MemorySpace::Host>::reinit<S2>(
          const BlockVector<S2, ::dealii::MemorySpace::Host> &,
          const bool);
        template void
        BlockVector<S1, ::dealii::MemorySpace::Host>::
          copy_locally_owned_data_from<S2>(
            const BlockVector<S2, ::dealii::MemorySpace::Host> &);
        template void
        BlockVector<S1, ::dealii::MemorySpace::Host>::add<S2>(
          const std::vector<size_type> &,
          const ::dealii::Vector<S2> &);
      \}
    \}
  }



for (S1, S2 : COMPLEX_SCALARS)
  {
    namespace LinearAlgebra
    \{
      namespace distributed
      \{
        template void
        BlockVector<S1, ::dealii::MemorySpace::Host>::reinit<S2>(
          const BlockVector<S2, ::dealii::MemorySpace::Host> &,
          const bool);
        template void
        BlockVector<S1, ::dealii::MemorySpace::Host>::
          copy_locally_owned_data_from<S2>(
            const BlockVector<S2, ::dealii::MemorySpace::Host> &);
        template void
        BlockVector<S1, ::dealii::MemorySpace::Host>::add<S2>(
          const std::vector<size_type> &,
          const ::dealii::Vector<S2> &);
      \}
    \}
  }
