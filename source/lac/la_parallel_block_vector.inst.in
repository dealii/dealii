// ---------------------------------------------------------------------
//
// Copyright (C) 2011 - 2018 by the deal.II authors
//
// This file is part of the deal.II library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE.md at
// the top level directory of deal.II.
//
// ---------------------------------------------------------------------



for (SCALAR : REAL_AND_COMPLEX_SCALARS)
  {
    namespace LinearAlgebra
    \{
      namespace distributed
      \{
        template class BlockVector<SCALAR>;
        template void
        BlockVector<SCALAR>::multivector_inner_product(
          FullMatrix<SCALAR> &,
          const BlockVector<SCALAR> &V,
          const bool) const;
        template void
        BlockVector<SCALAR>::multivector_inner_product(
          LAPACKFullMatrix<SCALAR> &,
          const BlockVector<SCALAR> &V,
          const bool) const;
        template SCALAR
        BlockVector<SCALAR>::multivector_inner_product_with_metric(
          const FullMatrix<SCALAR> &,
          const BlockVector<SCALAR> &V,
          const bool) const;
        template SCALAR
        BlockVector<SCALAR>::multivector_inner_product_with_metric(
          const LAPACKFullMatrix<SCALAR> &,
          const BlockVector<SCALAR> &V,
          const bool) const;
        template void
        BlockVector<SCALAR>::mmult(BlockVector<SCALAR> &V,
                                   const FullMatrix<SCALAR> &,
                                   const SCALAR,
                                   const SCALAR) const;
        template void
        BlockVector<SCALAR>::mmult(BlockVector<SCALAR> &V,
                                   const LAPACKFullMatrix<SCALAR> &,
                                   const SCALAR,
                                   const SCALAR) const;
      \}
    \}
  }

for (S1 : REAL_AND_COMPLEX_SCALARS; S2 : REAL_SCALARS)
  {
    namespace LinearAlgebra
    \{
      namespace distributed
      \{
        template void
        BlockVector<S1>::reinit<S2>(const BlockVector<S2> &, const bool);
        template void
        BlockVector<S1>::copy_locally_owned_data_from<S2>(
          const BlockVector<S2> &);
        template void
        BlockVector<S1>::add<S2>(const std::vector<size_type> &,
                                 const ::dealii::Vector<S2> &);
      \}
    \}
  }



for (S1, S2 : COMPLEX_SCALARS)
  {
    namespace LinearAlgebra
    \{
      namespace distributed
      \{
        template void
        BlockVector<S1>::reinit<S2>(const BlockVector<S2> &, const bool);
        template void
        BlockVector<S1>::copy_locally_owned_data_from<S2>(
          const BlockVector<S2> &);
        template void
        BlockVector<S1>::add<S2>(const std::vector<size_type> &,
                                 const ::dealii::Vector<S2> &);
      \}
    \}
  }
