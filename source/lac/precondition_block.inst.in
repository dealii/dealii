// ------------------------------------------------------------------------
//
// SPDX-License-Identifier: LGPL-2.1-or-later
// Copyright (C) 2007 - 2018 by the deal.II authors
//
// This file is part of the deal.II library.
//
// Part of the source code is dual licensed under Apache-2.0 WITH
// LLVM-exception OR LGPL-2.1-or-later. Detailed license information
// governing the source code and code contributions can be found in
// LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.
//
// ------------------------------------------------------------------------



for (S : REAL_SCALARS)
  {
    template class PreconditionBlockBase<S>;
  }


for (S1, S2 : REAL_SCALARS)
  {
    template class PreconditionBlock<SparseMatrix<S1>, S2>;
    template class PreconditionBlockJacobi<SparseMatrix<S1>, S2>;
    template class PreconditionBlockSOR<SparseMatrix<S1>, S2>;
    template class PreconditionBlockSSOR<SparseMatrix<S1>, S2>;
  }


for (S1, S2, S3 : REAL_SCALARS)
  {
    // ------------ PreconditionBlockJacobi -----------------
    template void PreconditionBlockJacobi<SparseMatrix<S1>, S2>::vmult<S3>(
      Vector<S3> &, const Vector<S3> &) const;
    template void PreconditionBlockJacobi<SparseMatrix<S1>, S2>::Tvmult<S3>(
      Vector<S3> &, const Vector<S3> &) const;
    template void PreconditionBlockJacobi<SparseMatrix<S1>, S2>::vmult_add<S3>(
      Vector<S3> &, const Vector<S3> &) const;
    template void PreconditionBlockJacobi<SparseMatrix<S1>, S2>::Tvmult_add<S3>(
      Vector<S3> &, const Vector<S3> &) const;
    template void PreconditionBlockJacobi<SparseMatrix<S1>, S2>::step<S3>(
      Vector<S3> &, const Vector<S3> &) const;
    template void PreconditionBlockJacobi<SparseMatrix<S1>, S2>::Tstep<S3>(
      Vector<S3> &, const Vector<S3> &) const;

    // ------------ PreconditionBlockSOR -----------------
    template void PreconditionBlockSOR<SparseMatrix<S1>, S2>::vmult<S3>(
      Vector<S3> &, const Vector<S3> &) const;
    template void PreconditionBlockSOR<SparseMatrix<S1>, S2>::Tvmult<S3>(
      Vector<S3> &, const Vector<S3> &) const;
    template void PreconditionBlockSOR<SparseMatrix<S1>, S2>::vmult_add<S3>(
      Vector<S3> &, const Vector<S3> &) const;
    template void PreconditionBlockSOR<SparseMatrix<S1>, S2>::Tvmult_add<S3>(
      Vector<S3> &, const Vector<S3> &) const;
    template void PreconditionBlockSOR<SparseMatrix<S1>, S2>::step<S3>(
      Vector<S3> &, const Vector<S3> &) const;
    template void PreconditionBlockSOR<SparseMatrix<S1>, S2>::Tstep<S3>(
      Vector<S3> &, const Vector<S3> &) const;

    // ------------ PreconditionBlockSSOR -----------------
    template void PreconditionBlockSSOR<SparseMatrix<S1>, S2>::vmult<S3>(
      Vector<S3> &, const Vector<S3> &) const;
    template void PreconditionBlockSSOR<SparseMatrix<S1>, S2>::Tvmult<S3>(
      Vector<S3> &, const Vector<S3> &) const;
    template void PreconditionBlockSSOR<SparseMatrix<S1>, S2>::step<S3>(
      Vector<S3> &, const Vector<S3> &) const;
    template void PreconditionBlockSSOR<SparseMatrix<S1>, S2>::Tstep<S3>(
      Vector<S3> &, const Vector<S3> &) const;
  }
