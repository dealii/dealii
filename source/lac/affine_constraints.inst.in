// ------------------------------------------------------------------------
//
// SPDX-License-Identifier: LGPL-2.1-or-later
// Copyright (C) 2018 - 2024 by the deal.II authors
//
// This file is part of the deal.II library.
//
// Part of the source code is dual licensed under Apache-2.0 WITH
// LLVM-exception OR LGPL-2.1-or-later. Detailed license information
// governing the source code and code contributions can be found in
// LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.
//
// ------------------------------------------------------------------------


for (S : REAL_AND_COMPLEX_SCALARS)
  {
    template class AffineConstraints<S>;
  }


// ------------------------------------------------------------------------
//
// Instantiate AffineConstraints<S>::condense variants
//
// ------------------------------------------------------------------------


for (S : REAL_AND_COMPLEX_SCALARS)
  {
    template void AffineConstraints<S>::condense<Vector<S>>(SparseMatrix<S> &,
                                                            Vector<S> &) const;

    template void AffineConstraints<S>::condense<BlockVector<S>>(
      BlockSparseMatrix<S> &, BlockVector<S> &) const;
  }

for (S : REAL_AND_COMPLEX_SCALARS; T : DEAL_II_VEC_TEMPLATES)
  {
    template void AffineConstraints<S>::condense<T<S>>(const T<S> &, T<S> &)
      const;

    template void
    AffineConstraints<S>::condense<LinearAlgebra::distributed::T<S>>(
      const LinearAlgebra::distributed::T<S> &,
      LinearAlgebra::distributed::T<S> &) const;

    template void AffineConstraints<S>::condense<T<S>>(T<S> & vec) const;

    template void
      AffineConstraints<S>::condense<LinearAlgebra::distributed::T<S>>(
        LinearAlgebra::distributed::T<S> & vec) const;
  }


// ------------------------------------------------------------------------
//
// Instantiate AffineConstraints<S>::distribute_local_to_global variants
//
// ------------------------------------------------------------------------


// Pure vector variants:

for (S : REAL_AND_COMPLEX_SCALARS; T : DEAL_II_VEC_TEMPLATES)
  {
    template void AffineConstraints<S>::distribute_local_to_global<T<S>>(
      const Vector<S> &,
      const std::vector<types::global_dof_index> &,
      T<S> &,
      const FullMatrix<S> &) const;

    template void AffineConstraints<S>::distribute_local_to_global<
      LinearAlgebra::distributed::T<S>>(
      const Vector<S> &,
      const std::vector<types::global_dof_index> &,
      LinearAlgebra::distributed::T<S> &,
      const FullMatrix<S> &) const;

    template void AffineConstraints<S>::distribute_local_to_global<T<S>>(
      const Vector<S> &,
      const std::vector<types::global_dof_index> &,
      const std::vector<types::global_dof_index> &,
      T<S> &,
      const FullMatrix<S> &,
      bool) const;

    template void AffineConstraints<S>::distribute_local_to_global<
      LinearAlgebra::distributed::T<S>>(
      const Vector<S> &,
      const std::vector<types::global_dof_index> &,
      const std::vector<types::global_dof_index> &,
      LinearAlgebra::distributed::T<S> &,
      const FullMatrix<S> &,
      bool) const;
  }

// Almost all matrix/vector variants:

for (S : REAL_AND_COMPLEX_SCALARS; M : AFFINE_CONSTRAINTS_MATRIX_TEMPL)
  {
    template void
    AffineConstraints<S>::distribute_local_to_global<M<S>, Vector<S>>(
      const FullMatrix<S> &,
      const Vector<S> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      M<S> &,
      Vector<S> &,
      bool,
      std::bool_constant<false>) const;

    template void AffineConstraints<S>::distribute_local_to_global<M<S>>(
      const FullMatrix<S> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      M<S> &) const;

    template void AffineConstraints<S>::distribute_local_to_global<M<S>>(
      const FullMatrix<S> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      const AffineConstraints<S> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      M<S> &) const;
  }

// DiagonalMatrix:

for (S : REAL_AND_COMPLEX_SCALARS; T : DEAL_II_VEC_TEMPLATES)
  {
    template void AffineConstraints<S>::distribute_local_to_global<
      DiagonalMatrix<T<S>>>(const FullMatrix<S> &,
                            const std::vector<size_type> &,
                            DiagonalMatrix<T<S>> &) const;

    template void AffineConstraints<S>::distribute_local_to_global<
      DiagonalMatrix<LinearAlgebra::distributed::T<S>>>(
      const FullMatrix<S> &,
      const std::vector<size_type> &,
      DiagonalMatrix<LinearAlgebra::distributed::T<S>> &) const;

    template void AffineConstraints<S>::distribute_local_to_global<
      DiagonalMatrix<T<S>>>(const FullMatrix<S> &,
                            const std::vector<size_type> &,
                            const std::vector<size_type> &,
                            DiagonalMatrix<T<S>> &) const;

    template void AffineConstraints<S>::distribute_local_to_global<
      DiagonalMatrix<LinearAlgebra::distributed::T<S>>>(
      const FullMatrix<S> &,
      const std::vector<size_type> &,
      const std::vector<size_type> &,
      DiagonalMatrix<LinearAlgebra::distributed::T<S>> &) const;

    template void AffineConstraints<S>::distribute_local_to_global<
      DiagonalMatrix<T<S>>,
      T<S>>(const FullMatrix<S> &,
            const Vector<S> &,
            const std::vector<size_type> &,
            DiagonalMatrix<T<S>> &,
            T<S> &,
            bool,
            std::bool_constant<false>) const;

    template void AffineConstraints<S>::distribute_local_to_global<
      DiagonalMatrix<LinearAlgebra::distributed::T<S>>,
      LinearAlgebra::distributed::T<S>>(
      const FullMatrix<S> &,
      const Vector<S> &,
      const std::vector<size_type> &,
      DiagonalMatrix<LinearAlgebra::distributed::T<S>> &,
      LinearAlgebra::distributed::T<S> &,
      bool,
      std::bool_constant<false>) const;

    template void AffineConstraints<S>::distribute_local_to_global<
      DiagonalMatrix<LinearAlgebra::distributed::T<S>>,
      T<S>>(const FullMatrix<S> &,
            const Vector<S> &,
            const std::vector<size_type> &,
            DiagonalMatrix<LinearAlgebra::distributed::T<S>> &,
            T<S> &,
            bool,
            std::bool_constant<false>) const;
  }

// BlockSparseMatrix:

for (S : REAL_AND_COMPLEX_SCALARS)
  {
    template void AffineConstraints<S>::distribute_local_to_global<
      BlockSparseMatrix<S>,
      Vector<S>>(const FullMatrix<S> &,
                 const Vector<S> &,
                 const std::vector<AffineConstraints<S>::size_type> &,
                 BlockSparseMatrix<S> &,
                 Vector<S> &,
                 bool,
                 std::bool_constant<true>) const;

    template void AffineConstraints<S>::distribute_local_to_global<
      BlockSparseMatrix<S>,
      BlockVector<S>>(const FullMatrix<S> &,
                      const Vector<S> &,
                      const std::vector<AffineConstraints<S>::size_type> &,
                      BlockSparseMatrix<S> &,
                      BlockVector<S> &,
                      bool,
                      std::bool_constant<true>) const;

    template void
    AffineConstraints<S>::distribute_local_to_global<BlockSparseMatrix<S>>(
      const FullMatrix<S> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      BlockSparseMatrix<S> &) const;

    template void
    AffineConstraints<S>::distribute_local_to_global<BlockSparseMatrix<S>>(
      const FullMatrix<S> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      const AffineConstraints<S> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      BlockSparseMatrix<S> &) const;
  }

// MatrixBlock

for (S : REAL_AND_COMPLEX_SCALARS)
  {
    template void AffineConstraints<S>::distribute_local_to_global<
      MatrixBlock<SparseMatrix<S>>>(
      const FullMatrix<S> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      MatrixBlock<SparseMatrix<S>> &) const;

    template void AffineConstraints<S>::distribute_local_to_global<
      MatrixBlock<SparseMatrix<S>>>(
      const FullMatrix<S> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      const AffineConstraints<S> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      MatrixBlock<SparseMatrix<S>> &) const;
  }

// ------------------------------------------------------------------------
//
// Tpetra:
//
// ------------------------------------------------------------------------

for (S : TRILINOS_SCALARS)
  {
    template void AffineConstraints<S>::distribute_local_to_global<
      LinearAlgebra::TpetraWrappers::SparseMatrix<S, MemorySpace::Host>,
      LinearAlgebra::TpetraWrappers::Vector<S, MemorySpace::Host>>(
      const FullMatrix<S> &,
      const Vector<S> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      LinearAlgebra::TpetraWrappers::SparseMatrix<S, MemorySpace::Host> &,
      LinearAlgebra::TpetraWrappers::Vector<S, MemorySpace::Host> &,
      bool,
      std::integral_constant<bool, false>) const;

    // BlockSparseMatrix
    template void AffineConstraints<S>::distribute_local_to_global<
      LinearAlgebra::TpetraWrappers::BlockSparseMatrix<S, MemorySpace::Host>,
      LinearAlgebra::TpetraWrappers::Vector<S, MemorySpace::Host>>(
      const FullMatrix<S> &,
      const Vector<S> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      LinearAlgebra::TpetraWrappers::BlockSparseMatrix<S, MemorySpace::Host> &,
      LinearAlgebra::TpetraWrappers::Vector<S, MemorySpace::Host> &,
      bool,
      std::bool_constant<true>) const;

    template void AffineConstraints<S>::distribute_local_to_global<
      LinearAlgebra::TpetraWrappers::BlockSparseMatrix<S, MemorySpace::Host>,
      LinearAlgebra::TpetraWrappers::BlockVector<S, MemorySpace::Host>>(
      const FullMatrix<S> &,
      const Vector<S> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      LinearAlgebra::TpetraWrappers::BlockSparseMatrix<S, MemorySpace::Host> &,
      LinearAlgebra::TpetraWrappers::BlockVector<S, MemorySpace::Host> &,
      bool,
      std::bool_constant<true>) const;

    template void AffineConstraints<S>::distribute_local_to_global<
      LinearAlgebra::TpetraWrappers::BlockSparseMatrix<S, MemorySpace::Host>>(
      const FullMatrix<S> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      LinearAlgebra::TpetraWrappers::BlockSparseMatrix<S, MemorySpace::Host> &)
      const;

    template void AffineConstraints<S>::distribute_local_to_global<
      LinearAlgebra::TpetraWrappers::BlockSparseMatrix<S, MemorySpace::Host>>(
      const FullMatrix<S> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      const AffineConstraints<S> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      LinearAlgebra::TpetraWrappers::BlockSparseMatrix<S, MemorySpace::Host> &)
      const;

    template void AffineConstraints<S>::distribute_local_to_global<
      LinearAlgebra::TpetraWrappers::SparseMatrix<S, MemorySpace::Default>,
      LinearAlgebra::TpetraWrappers::Vector<S, MemorySpace::Default>>(
      const FullMatrix<S> &,
      const Vector<S> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      LinearAlgebra::TpetraWrappers::SparseMatrix<S, MemorySpace::Default> &,
      LinearAlgebra::TpetraWrappers::Vector<S, MemorySpace::Default> &,
      bool,
      std::integral_constant<bool, false>) const;

    // BlockSparseMatrix
    template void AffineConstraints<S>::distribute_local_to_global<
      LinearAlgebra::TpetraWrappers::BlockSparseMatrix<S, MemorySpace::Default>,
      LinearAlgebra::TpetraWrappers::Vector<S, MemorySpace::Default>>(
      const FullMatrix<S> &,
      const Vector<S> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      LinearAlgebra::TpetraWrappers::BlockSparseMatrix<S, MemorySpace::Default>
        &,
      LinearAlgebra::TpetraWrappers::Vector<S, MemorySpace::Default> &,
      bool,
      std::bool_constant<true>) const;

    template void AffineConstraints<S>::distribute_local_to_global<
      LinearAlgebra::TpetraWrappers::BlockSparseMatrix<S, MemorySpace::Default>,
      LinearAlgebra::TpetraWrappers::BlockVector<S, MemorySpace::Default>>(
      const FullMatrix<S> &,
      const Vector<S> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      LinearAlgebra::TpetraWrappers::BlockSparseMatrix<S, MemorySpace::Default>
        &,
      LinearAlgebra::TpetraWrappers::BlockVector<S, MemorySpace::Default> &,
      bool,
      std::bool_constant<true>) const;

    template void AffineConstraints<S>::distribute_local_to_global<
      LinearAlgebra::TpetraWrappers::BlockSparseMatrix<S,
                                                       MemorySpace::Default>>(
      const FullMatrix<S> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      LinearAlgebra::TpetraWrappers::BlockSparseMatrix<S, MemorySpace::Default>
        &) const;

    template void AffineConstraints<S>::distribute_local_to_global<
      LinearAlgebra::TpetraWrappers::BlockSparseMatrix<S,
                                                       MemorySpace::Default>>(
      const FullMatrix<S> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      const AffineConstraints<S> &,
      const std::vector<AffineConstraints<S>::size_type> &,
      LinearAlgebra::TpetraWrappers::BlockSparseMatrix<S, MemorySpace::Default>
        &) const;
  }


// ------------------------------------------------------------------------
//
// Rest:
//
// ------------------------------------------------------------------------


for (S : REAL_AND_COMPLEX_SCALARS; T : DEAL_II_VEC_TEMPLATES)
  {
    template void AffineConstraints<S>::distribute<T<S>>(T<S> &) const;

    template void
    AffineConstraints<S>::distribute<LinearAlgebra::distributed::T<S>>(
      LinearAlgebra::distributed::T<S> &) const;
  }

for (S : COMPLEX_SCALARS; T : DEAL_II_VEC_TEMPLATES)
  {
    template void AffineConstraints<S::value_type>::distribute<T<S>>(T<S> &)
      const;

    template void AffineConstraints<S::value_type>::distribute<
      LinearAlgebra::distributed::T<S>>(LinearAlgebra::distributed::T<S> &)
      const;
  }

for (V : EXTERNAL_PARALLEL_VECTORS)
  {
    template void AffineConstraints<V::value_type>::distribute<V>(V &) const;
  }


//
// FIXME: These mixed variants are needed for multigrid and matrix free.
//

for (T : DEAL_II_VEC_TEMPLATES)
  {
    template void dealii::AffineConstraints<double>::condense<T<float>>(
      T<float> &) const;
    template void dealii::AffineConstraints<double>::distribute<T<float>>(
      T<float> &) const;

    template void dealii::AffineConstraints<double>::distribute<
      LinearAlgebra::distributed::T<float>>(
      LinearAlgebra::distributed::T<float> &) const;
  }


for (T : VECTOR_TYPES)
  {
    namespace internal
    {
      namespace AffineConstraintsImplementation
      {
        template void
        set_zero_all(const std::vector<types::global_dof_index> &, T &vec);
      \}
    \}
  }
