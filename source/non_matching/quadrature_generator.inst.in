// ------------------------------------------------------------------------
//
// SPDX-License-Identifier: LGPL-2.1-or-later
// Copyright (C) 2021 - 2024 by the deal.II authors
//
// This file is part of the deal.II library.
//
// Part of the source code is dual licensed under Apache-2.0 WITH
// LLVM-exception OR LGPL-2.1-or-later. Detailed license information
// governing the source code and code contributions can be found in
// LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.
//
// ------------------------------------------------------------------------


for (deal_II_dimension : DIMENSIONS)
  {
    namespace NonMatching
    \{
      template class QuadratureGenerator<deal_II_dimension>;
      template class DiscreteQuadratureGenerator<deal_II_dimension>;

#if 1 < deal_II_dimension
      template class FaceQuadratureGenerator<deal_II_dimension>;
#endif
      template class DiscreteFaceQuadratureGenerator<deal_II_dimension>;

      namespace internal
      \{
        namespace QuadratureGeneratorImplementation
        \{
          template struct FunctionBounds<deal_II_dimension>;

          template std::pair<double, double>
          find_extreme_values(
            const std::vector<FunctionBounds<deal_II_dimension>> &);

          template Definiteness
          pointwise_definiteness(
            const std::vector<
              std::reference_wrapper<const Function<deal_II_dimension>>> &,
            const Point<deal_II_dimension> &);

          template void
          estimate_function_bounds(
            const std::vector<
              std::reference_wrapper<const Function<deal_II_dimension>>> &,
            const BoundingBox<deal_II_dimension> &,
            std::vector<FunctionBounds<deal_II_dimension>> &);

// gcc gives a maybe-uninitialized warning in this function when dim = 1, but
// gcc is wrong. We don't need the function when dim = 1, so we avoid
// instantiating it.
#if 1 < deal_II_dimension
          template std::optional<HeightDirectionData>
          find_best_height_direction(
            const std::vector<FunctionBounds<deal_II_dimension>> &);
#endif

          template void
          map_quadrature_to_box(const Quadrature<deal_II_dimension> &,
                                const BoundingBox<deal_II_dimension> &,
                                ExtendableQuadrature<deal_II_dimension> &);

          template void
          tensor_point_with_1D_quadrature(
            const Point<deal_II_dimension - 1> &,
            const double,
            const Quadrature<1> &,
            const double,
            const double,
            const unsigned int,
            ExtendableQuadrature<deal_II_dimension> &q);
        \}
      \}
    \}
  }

for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS)
  {
#if 1 < deal_II_dimension
    template class NonMatching::internal::QuadratureGeneratorImplementation::
      UpThroughDimensionCreator<deal_II_dimension, deal_II_space_dimension>;
#endif
  }

for (S : REAL_SCALARS; deal_II_dimension : DIMENSIONS)
  {
    template NonMatching::DiscreteQuadratureGenerator<deal_II_dimension>::
      DiscreteQuadratureGenerator(const hp::QCollection<1> &,
                                  const DoFHandler<deal_II_dimension> &,
                                  const ReadVector<S> &,
                                  const AdditionalData &);

    template NonMatching::DiscreteFaceQuadratureGenerator<deal_II_dimension>::
      DiscreteFaceQuadratureGenerator(const hp::QCollection<1> &,
                                      const DoFHandler<deal_II_dimension> &,
                                      const ReadVector<S> &,
                                      const AdditionalData &);
  }
