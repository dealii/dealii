// ------------------------------------------------------------------------
//
// SPDX-License-Identifier: LGPL-2.1-or-later
// Copyright (C) 2021 - 2024 by the deal.II authors
//
// This file is part of the deal.II library.
//
// Part of the source code is dual licensed under Apache-2.0 WITH
// LLVM-exception OR LGPL-2.1-or-later. Detailed license information
// governing the source code and code contributions can be found in
// LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.
//
// ------------------------------------------------------------------------


for (deal_II_dimension : DIMENSIONS)
  {
    template class FEValues<deal_II_dimension>;

    template class FEInterfaceValues<deal_II_dimension>;
  }

for (S : REAL_SCALARS; deal_II_dimension : DIMENSIONS)
  {
    template FEValues<deal_II_dimension>::FEValues(
      const hp::MappingCollection<deal_II_dimension> &,
      const hp::FECollection<deal_II_dimension> &,
      const hp::QCollection<deal_II_dimension> &,
      const hp::QCollection<1> &,
      const RegionUpdateFlags,
      const MeshClassifier<deal_II_dimension> &,
      const DoFHandler<deal_II_dimension> &,
      const ReadVector<S> &,
      const typename FEValues<deal_II_dimension>::AdditionalData &);


    template FEValues<deal_II_dimension>::FEValues(
      const hp::FECollection<deal_II_dimension> &,
      const Quadrature<1> &,
      const RegionUpdateFlags,
      const MeshClassifier<deal_II_dimension> &,
      const DoFHandler<deal_II_dimension> &,
      const ReadVector<S> &,
      const typename FEValues<deal_II_dimension>::AdditionalData &);

    template FEInterfaceValues<deal_II_dimension>::FEInterfaceValues(
      const hp::FECollection<deal_II_dimension> &,
      const Quadrature<1> &,
      const RegionUpdateFlags,
      const MeshClassifier<deal_II_dimension> &,
      const DoFHandler<deal_II_dimension> &,
      const ReadVector<S> &,
      const FEInterfaceValues<deal_II_dimension>::AdditionalData &);

    template FEInterfaceValues<deal_II_dimension>::FEInterfaceValues(
      const hp::MappingCollection<deal_II_dimension> &,
      const hp::FECollection<deal_II_dimension> &,
      const hp::QCollection<deal_II_dimension - 1> &,
      const hp::QCollection<1> &,
      const RegionUpdateFlags,
      const MeshClassifier<deal_II_dimension> &,
      const DoFHandler<deal_II_dimension> &,
      const ReadVector<S> &,
      const AdditionalData &);
  }

// Template reinit functions
for (deal_II_dimension : DIMENSIONS)
  {
    template void FEInterfaceValues<deal_II_dimension>::do_reinit(
      const TriaIterator<CellAccessor<deal_II_dimension, deal_II_dimension>> &,
      const unsigned int,
      const unsigned int,
      const unsigned int,
      const std::function<void(dealii::FEInterfaceValues<deal_II_dimension> &,
                               const unsigned int)> &);
  }

for (deal_II_dimension : DIMENSIONS; lda : BOOL)
  {
    template void FEValues<deal_II_dimension>::reinit(
      const TriaIterator<
        DoFCellAccessor<deal_II_dimension, deal_II_dimension, lda>> &,
      const unsigned int,
      const unsigned int);

    template void FEInterfaceValues<deal_II_dimension>::do_reinit(
      const TriaIterator<
        DoFCellAccessor<deal_II_dimension, deal_II_dimension, lda>> &,
      const unsigned int,
      const unsigned int,
      const unsigned int,
      const std::function<void(dealii::FEInterfaceValues<deal_II_dimension> &,
                               const unsigned int)> &);
  }
