// ------------------------------------------------------------------------
//
// SPDX-License-Identifier: LGPL-2.1-or-later
// Copyright (C) 2020 - 2023 by the deal.II authors
//
// This file is part of the deal.II library.
//
// Part of the source code is dual licensed under Apache-2.0 WITH
// LLVM-exception OR LGPL-2.1-or-later. Detailed license information
// governing the source code and code contributions can be found in
// LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.
//
// ------------------------------------------------------------------------

for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS;
     scalar : REAL_SCALARS)
  {
#if deal_II_dimension <= deal_II_space_dimension && deal_II_dimension > 1
    template void create_interpolation_sparsity_pattern<deal_II_dimension,
                                                        deal_II_space_dimension,
                                                        scalar>(
      const DoFHandler<deal_II_dimension, deal_II_space_dimension> &space_dh,
      const Particles::ParticleHandler<deal_II_dimension,
                                       deal_II_space_dimension>
                                      &particle_handler,
      SparsityPatternBase             &sparsity,
      const AffineConstraints<scalar> &constraints,
      const ComponentMask             &space_comps);
#endif
  }


for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS;
     Matrix : SPARSE_MATRICES)
  {
#if deal_II_dimension <= deal_II_space_dimension && deal_II_dimension > 1
    template void create_interpolation_matrix<deal_II_dimension,
                                              deal_II_space_dimension,
                                              Matrix>(
      const DoFHandler<deal_II_dimension, deal_II_space_dimension> &space_dh,
      const Particles::ParticleHandler<deal_II_dimension,
                                       deal_II_space_dimension>
                                                  &particle_handler,
      Matrix                                      &matrix,
      const AffineConstraints<Matrix::value_type> &constraints,
      const ComponentMask                         &space_comps);
#endif
  }
