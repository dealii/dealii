// ------------------------------------------------------------------------
//
// SPDX-License-Identifier: LGPL-2.1-or-later
// Copyright (C) 2020 - 2025 by the deal.II authors
//
// This file is part of the deal.II library.
//
// Part of the source code is dual licensed under Apache-2.0 WITH
// LLVM-exception OR LGPL-2.1-or-later. Detailed license information
// governing the source code and code contributions can be found in
// LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.
//
// ------------------------------------------------------------------------

for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS)
  {
#if deal_II_dimension <= deal_II_space_dimension
    template std::unique_ptr<
      Mapping<deal_II_dimension, deal_II_space_dimension>>
    ReferenceCell::get_default_mapping(const unsigned int degree) const;

    template const Mapping<deal_II_dimension, deal_II_space_dimension> &
    ReferenceCell::get_default_linear_mapping() const;
#endif
  }

for (deal_II_dimension : DIMENSIONS)
  {
    template Point<deal_II_dimension> ReferenceCell::subface_vertex_location(
      const unsigned int,
      const unsigned int,
      const unsigned int,
      const RefinementCase<deal_II_dimension - 1>) const;

    template Quadrature<deal_II_dimension>
    ReferenceCell::get_gauss_type_quadrature(const unsigned n_points_1D) const;

    template const Quadrature<deal_II_dimension> &
    ReferenceCell::get_nodal_type_quadrature() const;

    template std::pair<unsigned int, RefinementCase<deal_II_dimension - 1>>
    ReferenceCell::equivalent_refinement_case(
      const types::geometric_orientation,
      const internal::SubfaceCase<deal_II_dimension>,
      const unsigned int) const;

    template Point<deal_II_dimension> ReferenceCell::closest_point(
      const Point<deal_II_dimension> &) const;
  }
