// ------------------------------------------------------------------------
//
// SPDX-License-Identifier: LGPL-2.1-or-later
// Copyright (C) 2010 - 2024 by the deal.II authors
//
// This file is part of the deal.II library.
//
// Part of the source code is dual licensed under Apache-2.0 WITH
// LLVM-exception OR LGPL-2.1-or-later. Detailed license information
// governing the source code and code contributions can be found in
// LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.
//
// ------------------------------------------------------------------------



for (deal_II_struct_dimension : DIMENSIONS; deal_II_dimension : DIMENSIONS;
     deal_II_space_dimension : SPACE_DIMENSIONS)
  {
#if deal_II_struct_dimension <= deal_II_dimension && \
  deal_II_dimension <= deal_II_space_dimension
    template class TriaAccessorBase<deal_II_struct_dimension,
                                    deal_II_dimension,
                                    deal_II_space_dimension>;
    template class TriaAccessor<deal_II_struct_dimension,
                                deal_II_dimension,
                                deal_II_space_dimension>;
    template class TriaRawIterator<TriaAccessor<deal_II_struct_dimension,
                                                deal_II_dimension,
                                                deal_II_space_dimension>>;
    template class TriaIterator<TriaAccessor<deal_II_struct_dimension,
                                             deal_II_dimension,
                                             deal_II_space_dimension>>;
    template class TriaActiveIterator<TriaAccessor<deal_II_struct_dimension,
                                                   deal_II_dimension,
                                                   deal_II_space_dimension>>;
#endif
  }


for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS)
  {
#if deal_II_dimension <= deal_II_space_dimension
    template class CellAccessor<deal_II_dimension, deal_II_space_dimension>;
    template class TriaRawIterator<
      CellAccessor<deal_II_dimension, deal_II_space_dimension>>;
    template class TriaIterator<
      CellAccessor<deal_II_dimension, deal_II_space_dimension>>;
    template class TriaActiveIterator<
      CellAccessor<deal_II_dimension, deal_II_space_dimension>>;
#endif
  }

for (deal_II_space_dimension : SPACE_DIMENSIONS)
  {
    template class TriaAccessor<0, 1, deal_II_space_dimension>;
    template class TriaIterator<TriaAccessor<0, 1, deal_II_space_dimension>>;
  }

for (deal_II_struct_dimension : DIMENSIONS; deal_II_dimension : DIMENSIONS;
     deal_II_space_dimension : SPACE_DIMENSIONS)
  {
    template class InvalidAccessor<deal_II_struct_dimension,
                                   deal_II_dimension,
                                   deal_II_space_dimension>;
  }
