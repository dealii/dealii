// ------------------------------------------------------------------------
//
// SPDX-License-Identifier: LGPL-2.1-or-later
// Copyright (C) 2010 - 2021 by the deal.II authors
//
// This file is part of the deal.II library.
//
// Part of the source code is dual licensed under Apache-2.0 WITH
// LLVM-exception OR LGPL-2.1-or-later. Detailed license information
// governing the source code and code contributions can be found in
// LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.
//
// ------------------------------------------------------------------------



for (S : REAL_SCALARS; deal_II_dimension : DIMENSIONS)
  {
    template void
    GridRefinement::refine<deal_II_dimension, S, deal_II_dimension>(
      Triangulation<deal_II_dimension> &,
      const dealii::Vector<S> &,
      const double,
      const unsigned int);

    template void
    GridRefinement::coarsen<deal_II_dimension, S, deal_II_dimension>(
      Triangulation<deal_II_dimension> &,
      const dealii::Vector<S> &,
      const double);

    template void GridRefinement::
      refine_and_coarsen_fixed_number<deal_II_dimension, S, deal_II_dimension>(
        Triangulation<deal_II_dimension> &,
        const dealii::Vector<S> &,
        const double,
        const double,
        const unsigned int);

    template void GridRefinement::refine_and_coarsen_fixed_fraction<
      deal_II_dimension,
      S,
      deal_II_dimension>(Triangulation<deal_II_dimension> &,
                         const dealii::Vector<S> &,
                         const double,
                         const double,
                         const unsigned int,
                         const VectorTools::NormType);

    template void GridRefinement::
      refine_and_coarsen_optimize<deal_II_dimension, S, deal_II_dimension>(
        Triangulation<deal_II_dimension> &,
        const dealii::Vector<S> &,
        const unsigned int);

#if deal_II_dimension < 3
    template void
    GridRefinement::refine<deal_II_dimension, S, deal_II_dimension + 1>(
      Triangulation<deal_II_dimension, deal_II_dimension + 1> &,
      const dealii::Vector<S> &,
      const double,
      const unsigned int);

    template void
    GridRefinement::coarsen<deal_II_dimension, S, deal_II_dimension + 1>(
      Triangulation<deal_II_dimension, deal_II_dimension + 1> &,
      const dealii::Vector<S> &,
      const double);

    template void
    GridRefinement::refine_and_coarsen_fixed_number<deal_II_dimension,
                                                    S,
                                                    deal_II_dimension + 1>(
      Triangulation<deal_II_dimension, deal_II_dimension + 1> &,
      const dealii::Vector<S> &,
      const double,
      const double,
      const unsigned int);

    template void
    GridRefinement::refine_and_coarsen_fixed_fraction<deal_II_dimension,
                                                      S,
                                                      deal_II_dimension + 1>(
      Triangulation<deal_II_dimension, deal_II_dimension + 1> &,
      const dealii::Vector<S> &,
      const double,
      const double,
      const unsigned int,
      const VectorTools::NormType);

    template void GridRefinement::
      refine_and_coarsen_optimize<deal_II_dimension, S, deal_II_dimension + 1>(
        Triangulation<deal_II_dimension, deal_II_dimension + 1> &,
        const dealii::Vector<S> &,
        const unsigned int);
#endif
  }

for (deal_II_dimension : DIMENSIONS)
  {
    template std::pair<double, double>
    GridRefinement::adjust_refine_and_coarsen_number_fraction<
      deal_II_dimension>(const types::global_cell_index,
                         const types::global_cell_index,
                         const double,
                         const double);
  }
