// ---------------------------------------------------------------------
//
// Copyright (C) 1998 - 2014 by the deal.II authors
//
// This file is part of the deal.II library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE at
// the top level of the deal.II distribution.
//
// ---------------------------------------------------------------------


for (VEC : SERIAL_VECTORS ; deal_II_dimension : DIMENSIONS; deal_II_space_dimension :  SPACE_DIMENSIONS)
  {
#if deal_II_dimension <= deal_II_space_dimension
    namespace VectorTools \{

      template
        void interpolate
        (const Mapping<deal_II_dimension,deal_II_space_dimension> &,
         const DoFHandler<deal_II_dimension,deal_II_space_dimension>&,
         const Function<deal_II_space_dimension>&,
         VEC&);

      template
        void interpolate
        (const DoFHandler<deal_II_dimension,deal_II_space_dimension>&,
         const Function<deal_II_space_dimension>&,
         VEC&);

      template
        void interpolate
        (const DoFHandler<deal_II_dimension,deal_II_space_dimension>&,
         const DoFHandler<deal_II_dimension,deal_II_space_dimension>&,
         const FullMatrix<double>&,
         const VEC&,
         VEC&);

      \}
#endif
  }



//TODO[SP]: replace <deal_II_dimension> by <deal_II_dimension, deal_II_space_dimension>
// where applicable and move to codimension cases above also when applicable
for (VEC : SERIAL_VECTORS ; deal_II_dimension : DIMENSIONS; deal_II_space_dimension :  SPACE_DIMENSIONS)
  {
#if deal_II_dimension == deal_II_space_dimension

    namespace VectorTools \{

      template
        void interpolate
        (const Mapping<deal_II_dimension>&,
         const hp::DoFHandler<deal_II_dimension>&,
         const Function<deal_II_dimension>&,
         VEC&);
      template
        void interpolate
        (const hp::DoFHandler<deal_II_dimension>&,
         const Function<deal_II_dimension>&,
         VEC&);
         
     template
      void interpolate_based_on_material_id(const Mapping<deal_II_dimension, deal_II_space_dimension>&,
                                            const DoFHandler<deal_II_dimension, deal_II_space_dimension>&,
                                            const std::map< types::material_id, const Function<deal_II_space_dimension>* >&,
                                            VEC&,
                                            const ComponentMask&);
         
     template
      void interpolate_based_on_material_id(const Mapping<deal_II_dimension>&,
                                            const hp::DoFHandler<deal_II_dimension>&,
                                            const std::map< types::material_id, const Function<deal_II_dimension>* >&,
                                            VEC&,
                                            const ComponentMask&);
         
      \}
#endif
  }


for (VEC : SERIAL_VECTORS ; deal_II_dimension : DIMENSIONS)
{
  namespace VectorTools \{

  template
    void interpolate_to_different_mesh
    (const DoFHandler<deal_II_dimension> &,
     const VEC                           &,
     const DoFHandler<deal_II_dimension> &,
     VEC                                 &);

  template
    void interpolate_to_different_mesh
    (const DoFHandler<deal_II_dimension> &,
     const VEC                           &,
     const DoFHandler<deal_II_dimension> &,
     const ConstraintMatrix              &,
     VEC                                 &);

  template
    void interpolate_to_different_mesh
    (const InterGridMap<DoFHandler<deal_II_dimension> > &,
     const VEC                                          &,
     const ConstraintMatrix                             &,
     VEC                                                &);
  \}
}
