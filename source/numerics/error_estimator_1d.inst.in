// ---------------------------------------------------------------------
//
// Copyright (C) 2010 - 2018 by the deal.II authors
//
// This file is part of the deal.II library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE.md at
// the top level directory of deal.II.
//
// ---------------------------------------------------------------------


for (VEC : VECTOR_TYPES; deal_II_dimension : DIMENSIONS;
     deal_II_space_dimension : SPACE_DIMENSIONS)
  {
#if deal_II_dimension == 1 && deal_II_dimension <= deal_II_space_dimension

    template void
    KellyErrorEstimator<deal_II_dimension, deal_II_space_dimension>::estimate<
      VEC>(
      const Mapping<deal_II_dimension, deal_II_space_dimension> &,
      const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
      const Quadrature<deal_II_dimension - 1> &,
      const std::map<types::boundary_id,
                     const Function<deal_II_space_dimension, VEC::value_type> *>
        &,
      const VEC &,
      Vector<float> &,
      const ComponentMask &,
      const Function<deal_II_space_dimension> *,
      const unsigned int,
      const types::subdomain_id,
      const types::material_id,
      const Strategy);

    template void
    KellyErrorEstimator<deal_II_dimension, deal_II_space_dimension>::estimate<
      VEC>(
      const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
      const Quadrature<deal_II_dimension - 1> &,
      const std::map<types::boundary_id,
                     const Function<deal_II_space_dimension, VEC::value_type> *>
        &,
      const VEC &,
      Vector<float> &,
      const ComponentMask &,
      const Function<deal_II_space_dimension> *,
      const unsigned int,
      const types::subdomain_id,
      const types::material_id,
      const Strategy);

    template void
    KellyErrorEstimator<deal_II_dimension, deal_II_space_dimension>::estimate<
      VEC>(
      const Mapping<deal_II_dimension, deal_II_space_dimension> &,
      const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
      const Quadrature<deal_II_dimension - 1> &,
      const std::map<types::boundary_id,
                     const Function<deal_II_space_dimension, VEC::value_type> *>
        &,
      const std::vector<const VEC *> &,
      std::vector<Vector<float> *> &,
      const ComponentMask &,
      const Function<deal_II_space_dimension> *,
      const unsigned int,
      const types::subdomain_id,
      const types::material_id,
      const Strategy);

    template void
    KellyErrorEstimator<deal_II_dimension, deal_II_space_dimension>::estimate<
      VEC>(
      const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
      const Quadrature<deal_II_dimension - 1> &,
      const std::map<types::boundary_id,
                     const Function<deal_II_space_dimension, VEC::value_type> *>
        &,
      const std::vector<const VEC *> &,
      std::vector<Vector<float> *> &,
      const ComponentMask &,
      const Function<deal_II_space_dimension> *,
      const unsigned int,
      const types::subdomain_id,
      const types::material_id,
      const Strategy);

    template void
    KellyErrorEstimator<deal_II_dimension, deal_II_space_dimension>::estimate<
      VEC>(
      const Mapping<deal_II_dimension, deal_II_space_dimension> &,
      const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
      const hp::QCollection<deal_II_dimension - 1> &,
      const std::map<types::boundary_id,
                     const Function<deal_II_space_dimension, VEC::value_type> *>
        &,
      const VEC &,
      Vector<float> &,
      const ComponentMask &,
      const Function<deal_II_space_dimension> *,
      const unsigned int,
      const types::subdomain_id,
      const types::material_id,
      const Strategy);

    template void
    KellyErrorEstimator<deal_II_dimension, deal_II_space_dimension>::estimate<
      VEC>(
      const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
      const hp::QCollection<deal_II_dimension - 1> &,
      const std::map<types::boundary_id,
                     const Function<deal_II_space_dimension, VEC::value_type> *>
        &,
      const VEC &,
      Vector<float> &,
      const ComponentMask &,
      const Function<deal_II_space_dimension> *,
      const unsigned int,
      const types::subdomain_id,
      const types::material_id,
      const Strategy);

    template void
    KellyErrorEstimator<deal_II_dimension, deal_II_space_dimension>::estimate<
      VEC>(
      const Mapping<deal_II_dimension, deal_II_space_dimension> &,
      const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
      const hp::QCollection<deal_II_dimension - 1> &,
      const std::map<types::boundary_id,
                     const Function<deal_II_space_dimension, VEC::value_type> *>
        &,
      const std::vector<const VEC *> &,
      std::vector<Vector<float> *> &,
      const ComponentMask &,
      const Function<deal_II_space_dimension> *,
      const unsigned int,
      const types::subdomain_id,
      const types::material_id,
      const Strategy);

    template void
    KellyErrorEstimator<deal_II_dimension, deal_II_space_dimension>::estimate<
      VEC>(
      const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
      const hp::QCollection<deal_II_dimension - 1> &,
      const std::map<types::boundary_id,
                     const Function<deal_II_space_dimension, VEC::value_type> *>
        &,
      const std::vector<const VEC *> &,
      std::vector<Vector<float> *> &,
      const ComponentMask &,
      const Function<deal_II_space_dimension> *,
      const unsigned int,
      const types::subdomain_id,
      const types::material_id,
      const Strategy);

#endif
  }
