// ------------------------------------------------------------------------
//
// SPDX-License-Identifier: LGPL-2.1-or-later
// Copyright (C) 2010 - 2023 by the deal.II authors
//
// This file is part of the deal.II library.
//
// Part of the source code is dual licensed under Apache-2.0 WITH
// LLVM-exception OR LGPL-2.1-or-later. Detailed license information
// governing the source code and code contributions can be found in
// LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.
//
// ------------------------------------------------------------------------


for (S : REAL_AND_COMPLEX_SCALARS; deal_II_dimension : DIMENSIONS;
     deal_II_space_dimension : SPACE_DIMENSIONS)
  {
#if deal_II_dimension == 1 && deal_II_dimension <= deal_II_space_dimension

    template void
    KellyErrorEstimator<deal_II_dimension, deal_II_space_dimension>::estimate<
      S>(const Mapping<deal_II_dimension, deal_II_space_dimension> &,
         const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
         const Quadrature<deal_II_dimension - 1> &,
         const std::map<types::boundary_id,
                        const Function<deal_II_space_dimension, S> *> &,
         const ReadVector<S> &,
         Vector<float> &,
         const ComponentMask &,
         const Function<deal_II_space_dimension> *,
         const unsigned int,
         const types::subdomain_id,
         const types::material_id,
         const Strategy);

    template void
    KellyErrorEstimator<deal_II_dimension, deal_II_space_dimension>::estimate<
      S>(const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
         const Quadrature<deal_II_dimension - 1> &,
         const std::map<types::boundary_id,
                        const Function<deal_II_space_dimension, S> *> &,
         const ReadVector<S> &,
         Vector<float> &,
         const ComponentMask &,
         const Function<deal_II_space_dimension> *,
         const unsigned int,
         const types::subdomain_id,
         const types::material_id,
         const Strategy);

    template void
    KellyErrorEstimator<deal_II_dimension, deal_II_space_dimension>::estimate<
      S>(const Mapping<deal_II_dimension, deal_II_space_dimension> &,
         const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
         const Quadrature<deal_II_dimension - 1> &,
         const std::map<types::boundary_id,
                        const Function<deal_II_space_dimension, S> *> &,
         const ArrayView<const ReadVector<S> *> &,
         ArrayView<Vector<float> *> &,
         const ComponentMask &,
         const Function<deal_II_space_dimension> *,
         const unsigned int,
         const types::subdomain_id,
         const types::material_id,
         const Strategy);

    template void
    KellyErrorEstimator<deal_II_dimension, deal_II_space_dimension>::estimate<
      S>(const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
         const Quadrature<deal_II_dimension - 1> &,
         const std::map<types::boundary_id,
                        const Function<deal_II_space_dimension, S> *> &,
         const ArrayView<const ReadVector<S> *> &,
         ArrayView<Vector<float> *> &,
         const ComponentMask &,
         const Function<deal_II_space_dimension> *,
         const unsigned int,
         const types::subdomain_id,
         const types::material_id,
         const Strategy);

    template void
    KellyErrorEstimator<deal_II_dimension, deal_II_space_dimension>::estimate<
      S>(
      const hp::MappingCollection<deal_II_dimension, deal_II_space_dimension> &,
      const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
      const hp::QCollection<deal_II_dimension - 1> &,
      const std::map<types::boundary_id,
                     const Function<deal_II_space_dimension, S> *> &,
      const ReadVector<S> &,
      Vector<float> &,
      const ComponentMask &,
      const Function<deal_II_space_dimension> *,
      const unsigned int,
      const types::subdomain_id,
      const types::material_id,
      const Strategy);

    // DEPRECATED
    template void
    KellyErrorEstimator<deal_II_dimension, deal_II_space_dimension>::estimate<
      S>(const Mapping<deal_II_dimension, deal_II_space_dimension> &,
         const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
         const hp::QCollection<deal_II_dimension - 1> &,
         const std::map<types::boundary_id,
                        const Function<deal_II_space_dimension, S> *> &,
         const ReadVector<S> &,
         Vector<float> &,
         const ComponentMask &,
         const Function<deal_II_space_dimension> *,
         const unsigned int,
         const types::subdomain_id,
         const types::material_id,
         const Strategy);

    template void
    KellyErrorEstimator<deal_II_dimension, deal_II_space_dimension>::estimate<
      S>(const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
         const hp::QCollection<deal_II_dimension - 1> &,
         const std::map<types::boundary_id,
                        const Function<deal_II_space_dimension, S> *> &,
         const ReadVector<S> &,
         Vector<float> &,
         const ComponentMask &,
         const Function<deal_II_space_dimension> *,
         const unsigned int,
         const types::subdomain_id,
         const types::material_id,
         const Strategy);

    template void
    KellyErrorEstimator<deal_II_dimension, deal_II_space_dimension>::estimate<
      S>(
      const hp::MappingCollection<deal_II_dimension, deal_II_space_dimension> &,
      const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
      const hp::QCollection<deal_II_dimension - 1> &,
      const std::map<types::boundary_id,
                     const Function<deal_II_space_dimension, S> *> &,
      const ArrayView<const ReadVector<S> *> &,
      ArrayView<Vector<float> *> &,
      const ComponentMask &,
      const Function<deal_II_space_dimension> *,
      const unsigned int,
      const types::subdomain_id,
      const types::material_id,
      const Strategy);

    // DEPRECATED
    template void
    KellyErrorEstimator<deal_II_dimension, deal_II_space_dimension>::estimate<
      S>(const Mapping<deal_II_dimension, deal_II_space_dimension> &,
         const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
         const hp::QCollection<deal_II_dimension - 1> &,
         const std::map<types::boundary_id,
                        const Function<deal_II_space_dimension, S> *> &,
         const ArrayView<const ReadVector<S> *> &,
         ArrayView<Vector<float> *> &,
         const ComponentMask &,
         const Function<deal_II_space_dimension> *,
         const unsigned int,
         const types::subdomain_id,
         const types::material_id,
         const Strategy);

    template void
    KellyErrorEstimator<deal_II_dimension, deal_II_space_dimension>::estimate<
      S>(const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
         const hp::QCollection<deal_II_dimension - 1> &,
         const std::map<types::boundary_id,
                        const Function<deal_II_space_dimension, S> *> &,
         const ArrayView<const ReadVector<S> *> &,
         ArrayView<Vector<float> *> &,
         const ComponentMask &,
         const Function<deal_II_space_dimension> *,
         const unsigned int,
         const types::subdomain_id,
         const types::material_id,
         const Strategy);

#endif
  }
