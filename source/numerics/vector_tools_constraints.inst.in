// ------------------------------------------------------------------------
//
// SPDX-License-Identifier: LGPL-2.1-or-later
// Copyright (C) 2013 - 2024 by the deal.II authors
//
// This file is part of the deal.II library.
//
// Part of the source code is dual licensed under Apache-2.0 WITH
// LLVM-exception OR LGPL-2.1-or-later. Detailed license information
// governing the source code and code contributions can be found in
// LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.
//
// ------------------------------------------------------------------------


// TODO[SP]: replace <deal_II_dimension> by <deal_II_dimension,
// deal_II_space_dimension>
// where applicable and move to codimension cases above also when applicable
for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS)
  {
    namespace VectorTools
    \{

#if deal_II_dimension == deal_II_space_dimension
#  if deal_II_dimension != 1
      template void
      compute_nonzero_normal_flux_constraints(
        const DoFHandler<deal_II_dimension> &dof_handler,
        const unsigned int                   first_vector_component,
        const std::set<types::boundary_id>  &boundary_ids,
        const std::map<types::boundary_id, const Function<deal_II_dimension> *>
                                         &function_map,
        AffineConstraints<double>        &constraints,
        const Mapping<deal_II_dimension> &mapping,
        const bool                        use_manifold_for_normal);

      template void
      compute_nonzero_normal_flux_constraints_on_level(
        const DoFHandler<deal_II_dimension> &dof_handler,
        const unsigned int                   first_vector_component,
        const std::set<types::boundary_id>  &boundary_ids,
        const std::map<types::boundary_id, const Function<deal_II_dimension> *>
                                         &function_map,
        AffineConstraints<double>        &constraints,
        const Mapping<deal_II_dimension> &mapping,
        const IndexSet                   &refinement_edge_indices,
        const unsigned int                level,
        const bool                        use_manifold_for_normal);


      template void
      compute_nonzero_tangential_flux_constraints(
        const DoFHandler<deal_II_dimension> &dof_handler,
        const unsigned int                   first_vector_component,
        const std::set<types::boundary_id>  &boundary_ids,
        const std::map<types::boundary_id, const Function<deal_II_dimension> *>
                                         &function_map,
        AffineConstraints<double>        &constraints,
        const Mapping<deal_II_dimension> &mapping,
        const bool                        use_manifold_for_normal);

      template void
      compute_no_normal_flux_constraints(
        const DoFHandler<deal_II_dimension> &dof_handler,
        const unsigned int                   first_vector_component,
        const std::set<types::boundary_id>  &boundary_ids,
        AffineConstraints<double>           &constraints,
        const Mapping<deal_II_dimension>    &mapping,
        const bool                           use_manifold_for_normal);

      template void
      compute_no_normal_flux_constraints(
        const DoFHandler<deal_II_dimension> &dof_handler,
        const unsigned int                   first_vector_component,
        const std::set<types::boundary_id>  &boundary_ids,
        AffineConstraints<float>            &constraints,
        const Mapping<deal_II_dimension>    &mapping,
        const bool                           use_manifold_for_normal);

      template void
      compute_no_normal_flux_constraints_on_level(
        const DoFHandler<deal_II_dimension> &dof_handler,
        const unsigned int                   first_vector_component,
        const std::set<types::boundary_id>  &boundary_ids,
        AffineConstraints<double>           &constraints,
        const Mapping<deal_II_dimension>    &mapping,
        const IndexSet                      &refinement_edge_indices,
        const unsigned int                   level,
        const bool                           use_manifold_for_normal);

      template void
      compute_normal_flux_constraints(
        const DoFHandler<deal_II_dimension> &dof_handler,
        const unsigned int                   first_vector_component,
        const std::set<types::boundary_id>  &boundary_ids,
        AffineConstraints<double>           &constraints,
        const Mapping<deal_II_dimension>    &mapping,
        const bool                           use_manifold_for_normal);
#  endif
#endif
    \}
  }
