// ---------------------------------------------------------------------
//
// Copyright (C) 1998 - 2020 by the deal.II authors
//
// This file is part of the deal.II library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE.md at
// the top level directory of deal.II.
//
// ---------------------------------------------------------------------


for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS;
     number : REAL_AND_COMPLEX_SCALARS)
  {
#if deal_II_dimension <= deal_II_space_dimension
    namespace VectorTools
    \{
      template void
      interpolate_boundary_values(
        const Mapping<deal_II_dimension, deal_II_space_dimension> &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const std::map<types::boundary_id,
                       const Function<deal_II_space_dimension, number> *> &,
        std::map<types::global_dof_index, number> &,
        const ComponentMask &);

      template void
      interpolate_boundary_values(
        const Mapping<deal_II_dimension, deal_II_space_dimension> &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const types::boundary_id,
        const Function<deal_II_space_dimension, number> &,
        std::map<types::global_dof_index, number> &,
        const ComponentMask &);

      template void
      interpolate_boundary_values(
        const hp::MappingCollection<deal_II_dimension, deal_II_space_dimension>
          &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const std::map<types::boundary_id,
                       const Function<deal_II_space_dimension, number> *> &,
        std::map<types::global_dof_index, number> &,
        const ComponentMask &);

      template void
      interpolate_boundary_values(
        const hp::MappingCollection<deal_II_dimension, deal_II_space_dimension>
          &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const types::boundary_id,
        const Function<deal_II_space_dimension, number> &,
        std::map<types::global_dof_index, number> &,
        const ComponentMask &);

      template void
      interpolate_boundary_values(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const types::boundary_id,
        const Function<deal_II_space_dimension, number> &,
        std::map<types::global_dof_index, number> &,
        const ComponentMask &);

      template void
      interpolate_boundary_values(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const std::map<types::boundary_id,
                       const Function<deal_II_space_dimension, number> *> &,
        std::map<types::global_dof_index, number> &,
        const ComponentMask &);
    \}
#endif
  }



for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS;
     number : REAL_AND_COMPLEX_SCALARS)
  {
#if deal_II_dimension <= deal_II_space_dimension
    namespace VectorTools
    \{

      template void
      interpolate_boundary_values(
        const Mapping<deal_II_dimension, deal_II_space_dimension> &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const std::map<types::boundary_id,
                       const Function<deal_II_space_dimension, number> *> &,
        AffineConstraints<number> &,
        const ComponentMask &);

      template void
      interpolate_boundary_values(
        const Mapping<deal_II_dimension, deal_II_space_dimension> &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const types::boundary_id,
        const Function<deal_II_space_dimension, number> &,
        AffineConstraints<number> &,
        const ComponentMask &);

      template void
      interpolate_boundary_values(
        const hp::MappingCollection<deal_II_dimension, deal_II_space_dimension>
          &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const std::map<types::boundary_id,
                       const Function<deal_II_space_dimension, number> *> &,
        AffineConstraints<number> &,
        const ComponentMask &);

      template void
      interpolate_boundary_values(
        const hp::MappingCollection<deal_II_dimension, deal_II_space_dimension>
          &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const types::boundary_id,
        const Function<deal_II_space_dimension, number> &,
        AffineConstraints<number> &,
        const ComponentMask &);

      template void
      interpolate_boundary_values(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const types::boundary_id,
        const Function<deal_II_space_dimension, number> &,
        AffineConstraints<number> &,
        const ComponentMask &);

      template void
      interpolate_boundary_values(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const std::map<types::boundary_id,
                       const Function<deal_II_space_dimension, number> *> &,
        AffineConstraints<number> &,
        const ComponentMask &);

    \}
#endif
  }

for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS;
     number : REAL_AND_COMPLEX_SCALARS)
  {
#if deal_II_dimension <= deal_II_space_dimension
    namespace VectorTools
    \{

      template void
      project_boundary_values<deal_II_dimension>(
        const Mapping<deal_II_dimension, deal_II_space_dimension> &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const std::map<types::boundary_id,
                       const Function<deal_II_space_dimension, number> *> &,
        const Quadrature<deal_II_dimension - 1> &,
        std::map<types::global_dof_index, number> &,
        std::vector<unsigned int>);

      template void
      project_boundary_values<deal_II_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const std::map<types::boundary_id,
                       const Function<deal_II_space_dimension, number> *> &,
        const Quadrature<deal_II_dimension - 1> &,
        std::map<types::global_dof_index, number> &,
        std::vector<unsigned int>);

      template void
      project_boundary_values<deal_II_dimension>(
        const hp::MappingCollection<deal_II_dimension, deal_II_space_dimension>
          &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const std::map<types::boundary_id,
                       const Function<deal_II_space_dimension, number> *> &,
        const hp::QCollection<deal_II_dimension - 1> &,
        std::map<types::global_dof_index, number> &,
        std::vector<unsigned int>);

      template void
      project_boundary_values<deal_II_dimension, deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const std::map<types::boundary_id,
                       const Function<deal_II_space_dimension, number> *> &,
        const hp::QCollection<deal_II_dimension - 1> &,
        std::map<types::global_dof_index, number> &,
        std::vector<unsigned int>);

    \}
#endif
  }

for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS;
     number : REAL_AND_COMPLEX_SCALARS)
  {
    namespace VectorTools
    \{
#if deal_II_dimension == deal_II_space_dimension


      template void
      project_boundary_values<deal_II_dimension>(
        const Mapping<deal_II_dimension> &,
        const DoFHandler<deal_II_dimension> &,
        const std::map<types::boundary_id,
                       const Function<deal_II_dimension, number> *> &,
        const Quadrature<deal_II_dimension - 1> &,
        AffineConstraints<number> &,
        std::vector<unsigned int>);

      template void
      project_boundary_values<deal_II_dimension>(
        const DoFHandler<deal_II_dimension> &,
        const std::map<types::boundary_id,
                       const Function<deal_II_dimension, number> *> &,
        const Quadrature<deal_II_dimension - 1> &,
        AffineConstraints<number> &,
        std::vector<unsigned int>);
#endif
    \}
  }


for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS)
  {
    namespace VectorTools
    \{
#if deal_II_dimension == deal_II_space_dimension

#  if deal_II_dimension != 1
      template void
      project_boundary_values_curl_conforming<deal_II_dimension>(
        const DoFHandler<deal_II_dimension> &,
        const unsigned int,
        const Function<deal_II_dimension> &,
        const types::boundary_id,
        AffineConstraints<double> &,
        const Mapping<deal_II_dimension> &);
      template void
      project_boundary_values_curl_conforming<deal_II_dimension>(
        const DoFHandler<deal_II_dimension> &,
        const unsigned int,
        const Function<deal_II_dimension> &,
        const types::boundary_id,
        AffineConstraints<double> &,
        const hp::MappingCollection<deal_II_dimension> &);
      template void
      project_boundary_values_curl_conforming_l2(
        const DoFHandler<deal_II_dimension> &,
        const unsigned int,
        const Function<deal_II_dimension, double> &,
        const types::boundary_id,
        AffineConstraints<double> &,
        const Mapping<deal_II_dimension> &);
#    ifdef DEAL_II_WITH_COMPLEX_VALUES
      template void
      project_boundary_values_curl_conforming_l2(
        const DoFHandler<deal_II_dimension> &,
        const unsigned int,
        const Function<deal_II_dimension, std::complex<double>> &,
        const types::boundary_id,
        AffineConstraints<std::complex<double>> &,
        const Mapping<deal_II_dimension> &);
#    endif
      template void
      project_boundary_values_curl_conforming_l2(
        const DoFHandler<deal_II_dimension> &,
        const unsigned int,
        const Function<deal_II_dimension, double> &,
        const types::boundary_id,
        AffineConstraints<double> &,
        const hp::MappingCollection<deal_II_dimension> &);
#    ifdef DEAL_II_WITH_COMPLEX_VALUES
      template void
      project_boundary_values_curl_conforming_l2(
        const DoFHandler<deal_II_dimension> &,
        const unsigned int,
        const Function<deal_II_dimension, std::complex<double>> &,
        const types::boundary_id,
        AffineConstraints<std::complex<double>> &,
        const hp::MappingCollection<deal_II_dimension> &);
#    endif
      template void
      project_boundary_values_div_conforming<deal_II_dimension>(
        const DoFHandler<deal_II_dimension> &,
        const unsigned int,
        const Function<deal_II_dimension> &,
        const types::boundary_id,
        AffineConstraints<double> &,
        const Mapping<deal_II_dimension> &);
      template void
      project_boundary_values_div_conforming<deal_II_dimension>(
        const DoFHandler<deal_II_dimension> &,
        const unsigned int,
        const Function<deal_II_dimension> &,
        const types::boundary_id,
        AffineConstraints<double> &,
        const hp::MappingCollection<deal_II_dimension> &);
#  endif
#endif
    \}
  }
