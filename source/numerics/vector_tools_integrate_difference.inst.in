// ------------------------------------------------------------------------
//
// SPDX-License-Identifier: LGPL-2.1-or-later
// Copyright (C) 2013 - 2023 by the deal.II authors
//
// This file is part of the deal.II library.
//
// Part of the source code is dual licensed under Apache-2.0 WITH
// LLVM-exception OR LGPL-2.1-or-later. Detailed license information
// governing the source code and code contributions can be found in
// LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.
//
// ------------------------------------------------------------------------


for (S : REAL_AND_COMPLEX_SCALARS; deal_II_dimension : DIMENSIONS;
     deal_II_space_dimension : SPACE_DIMENSIONS)
  {
#if deal_II_dimension <= deal_II_space_dimension
    namespace VectorTools
    \{

      template void
      integrate_difference<deal_II_dimension,
                           S,
                           Vector<float>,
                           deal_II_space_dimension>(
        const Mapping<deal_II_dimension, deal_II_space_dimension> &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const ReadVector<S> &,
        const Function<deal_II_space_dimension, S> &,
        Vector<float> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           S,
                           Vector<float>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const ReadVector<S> &,
        const Function<deal_II_space_dimension, S> &,
        Vector<float> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           S,
                           Vector<double>,
                           deal_II_space_dimension>(
        const Mapping<deal_II_dimension, deal_II_space_dimension> &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const ReadVector<S> &,
        const Function<deal_II_space_dimension, S> &,
        Vector<double> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           S,
                           Vector<double>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const ReadVector<S> &,
        const Function<deal_II_space_dimension, S> &,
        Vector<double> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           S,
                           Vector<double>,
                           deal_II_space_dimension>(
        const hp::MappingCollection<deal_II_dimension, deal_II_space_dimension>
          &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const ReadVector<S> &,
        const Function<deal_II_space_dimension, S> &,
        Vector<double> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           S,
                           Vector<double>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const ReadVector<S> &,
        const Function<deal_II_space_dimension, S> &,
        Vector<double> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           S,
                           Vector<float>,
                           deal_II_space_dimension>(
        const hp::MappingCollection<deal_II_dimension, deal_II_space_dimension>
          &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const ReadVector<S> &,
        const Function<deal_II_space_dimension, S> &,
        Vector<float> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           S,
                           Vector<float>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const ReadVector<S> &,
        const Function<deal_II_space_dimension, S> &,
        Vector<float> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

    \}
#endif
  }

for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS)
  {
#if deal_II_dimension <= deal_II_space_dimension
    namespace VectorTools
    \{
      template double
      compute_global_error<deal_II_dimension,
                           deal_II_space_dimension,
                           Vector<float>>(
        const Triangulation<deal_II_dimension, deal_II_space_dimension> &,
        const Vector<float> &,
        const NormType &,
        const double);

      template double
      compute_global_error<deal_II_dimension,
                           deal_II_space_dimension,
                           Vector<double>>(
        const Triangulation<deal_II_dimension, deal_II_space_dimension> &,
        const Vector<double> &,
        const NormType &,
        const double);
    \}
#endif
  }
