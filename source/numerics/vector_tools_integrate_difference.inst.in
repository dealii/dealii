// ---------------------------------------------------------------------
//
// Copyright (C) 1998 - 2019 by the deal.II authors
//
// This file is part of the deal.II library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE.md at
// the top level directory of deal.II.
//
// ---------------------------------------------------------------------


for (VEC : VECTOR_TYPES; deal_II_dimension : DIMENSIONS;
     deal_II_space_dimension : SPACE_DIMENSIONS)
  {
#if deal_II_dimension <= deal_II_space_dimension
    namespace VectorTools
    \{

      template void
      integrate_difference<deal_II_dimension,
                           VEC,
                           Vector<float>,
                           deal_II_space_dimension>(
        const Mapping<deal_II_dimension, deal_II_space_dimension> &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const VEC &,
        const Function<deal_II_space_dimension, typename VEC::value_type> &,
        Vector<float> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           VEC,
                           Vector<float>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const VEC &,
        const Function<deal_II_space_dimension, typename VEC::value_type> &,
        Vector<float> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           VEC,
                           Vector<double>,
                           deal_II_space_dimension>(
        const Mapping<deal_II_dimension, deal_II_space_dimension> &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const VEC &,
        const Function<deal_II_space_dimension, typename VEC::value_type> &,
        Vector<double> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           VEC,
                           Vector<double>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const VEC &,
        const Function<deal_II_space_dimension, typename VEC::value_type> &,
        Vector<double> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           VEC,
                           Vector<double>,
                           deal_II_space_dimension>(
        const hp::MappingCollection<deal_II_dimension, deal_II_space_dimension>
          &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const VEC &,
        const Function<deal_II_space_dimension, typename VEC::value_type> &,
        Vector<double> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           VEC,
                           Vector<double>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const VEC &,
        const Function<deal_II_space_dimension, typename VEC::value_type> &,
        Vector<double> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           VEC,
                           Vector<float>,
                           deal_II_space_dimension>(
        const hp::MappingCollection<deal_II_dimension, deal_II_space_dimension>
          &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const VEC &,
        const Function<deal_II_space_dimension, typename VEC::value_type> &,
        Vector<float> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           VEC,
                           Vector<float>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const VEC &,
        const Function<deal_II_space_dimension, typename VEC::value_type> &,
        Vector<float> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

    \}
#endif
  }

// All the functions in this for loop are deprecated
for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS)
  {
#if deal_II_dimension <= deal_II_space_dimension
    namespace VectorTools
    \{

      template void
      integrate_difference<deal_II_dimension,
                           Vector<float>,
                           Vector<float>,
                           deal_II_space_dimension>(
        const Mapping<deal_II_dimension, deal_II_space_dimension> &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<float> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           BlockVector<float>,
                           Vector<float>,
                           deal_II_space_dimension>(
        const Mapping<deal_II_dimension, deal_II_space_dimension> &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const BlockVector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<float> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::Vector<float>,
                           Vector<float>,
                           deal_II_space_dimension>(
        const Mapping<deal_II_dimension, deal_II_space_dimension> &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<float> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::distributed::Vector<float>,
                           Vector<float>,
                           deal_II_space_dimension>(
        const Mapping<deal_II_dimension, deal_II_space_dimension> &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::distributed::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<float> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::distributed::BlockVector<float>,
                           Vector<float>,
                           deal_II_space_dimension>(
        const Mapping<deal_II_dimension, deal_II_space_dimension> &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::distributed::BlockVector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<float> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

#  ifdef DEAL_II_TRILINOS_WITH_TPETRA
      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::TpetraWrappers::Vector<float>,
                           Vector<float>,
                           deal_II_space_dimension>(
        const Mapping<deal_II_dimension, deal_II_space_dimension> &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::TpetraWrappers::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<float> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);
#  endif

      template void
      integrate_difference<deal_II_dimension,
                           Vector<float>,
                           Vector<float>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<float> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           BlockVector<float>,
                           Vector<float>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const BlockVector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<float> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::Vector<float>,
                           Vector<float>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<float> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::distributed::Vector<float>,
                           Vector<float>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::distributed::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<float> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::distributed::BlockVector<float>,
                           Vector<float>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::distributed::BlockVector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<float> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

#  ifdef DEAL_II_TRILINOS_WITH_TPETRA
      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::TpetraWrappers::Vector<float>,
                           Vector<float>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::TpetraWrappers::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<float> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);
#  endif

      template void
      integrate_difference<deal_II_dimension,
                           BlockVector<float>,
                           Vector<double>,
                           deal_II_space_dimension>(
        const Mapping<deal_II_dimension, deal_II_space_dimension> &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const BlockVector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<double> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::Vector<float>,
                           Vector<double>,
                           deal_II_space_dimension>(
        const Mapping<deal_II_dimension, deal_II_space_dimension> &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<double> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);


      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::distributed::Vector<float>,
                           Vector<double>,
                           deal_II_space_dimension>(
        const Mapping<deal_II_dimension, deal_II_space_dimension> &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::distributed::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<double> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::distributed::BlockVector<float>,
                           Vector<double>,
                           deal_II_space_dimension>(
        const Mapping<deal_II_dimension, deal_II_space_dimension> &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::distributed::BlockVector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<double> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

#  ifdef DEAL_II_TRILINOS_WITH_TPETRA
      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::TpetraWrappers::Vector<float>,
                           Vector<double>,
                           deal_II_space_dimension>(
        const Mapping<deal_II_dimension, deal_II_space_dimension> &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::TpetraWrappers::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<double> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);
#  endif

      template void
      integrate_difference<deal_II_dimension,
                           BlockVector<float>,
                           Vector<double>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const BlockVector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<double> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::Vector<float>,
                           Vector<double>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<double> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::distributed::Vector<float>,
                           Vector<double>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::distributed::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<double> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::distributed::BlockVector<float>,
                           Vector<double>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::distributed::BlockVector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<double> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

#  ifdef DEAL_II_TRILINOS_WITH_TPETRA
      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::TpetraWrappers::Vector<float>,
                           Vector<double>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::TpetraWrappers::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<double> &,
        const Quadrature<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);
#  endif

      template void
      integrate_difference<deal_II_dimension,
                           BlockVector<float>,
                           Vector<double>,
                           deal_II_space_dimension>(
        const hp::MappingCollection<deal_II_dimension, deal_II_space_dimension>
          &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const BlockVector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<double> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::Vector<float>,
                           Vector<double>,
                           deal_II_space_dimension>(
        const hp::MappingCollection<deal_II_dimension, deal_II_space_dimension>
          &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<double> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::distributed::Vector<float>,
                           Vector<double>,
                           deal_II_space_dimension>(
        const hp::MappingCollection<deal_II_dimension, deal_II_space_dimension>
          &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::distributed::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<double> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::distributed::BlockVector<float>,
                           Vector<double>,
                           deal_II_space_dimension>(
        const hp::MappingCollection<deal_II_dimension, deal_II_space_dimension>
          &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::distributed::BlockVector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<double> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

#  ifdef DEAL_II_TRILINOS_WITH_TPETRA
      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::TpetraWrappers::Vector<float>,
                           Vector<double>,
                           deal_II_space_dimension>(
        const hp::MappingCollection<deal_II_dimension, deal_II_space_dimension>
          &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::TpetraWrappers::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<double> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);
#  endif

      template void
      integrate_difference<deal_II_dimension,
                           BlockVector<float>,
                           Vector<double>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const BlockVector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<double> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::Vector<float>,
                           Vector<double>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<double> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::distributed::Vector<float>,
                           Vector<double>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::distributed::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<double> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::distributed::BlockVector<float>,
                           Vector<double>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::distributed::BlockVector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<double> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

#  ifdef DEAL_II_TRILINOS_WITH_TPETRA
      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::TpetraWrappers::Vector<float>,
                           Vector<double>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::TpetraWrappers::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<double> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);
#  endif

      template void
      integrate_difference<deal_II_dimension,
                           BlockVector<float>,
                           Vector<float>,
                           deal_II_space_dimension>(
        const hp::MappingCollection<deal_II_dimension, deal_II_space_dimension>
          &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const BlockVector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<float> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::Vector<float>,
                           Vector<float>,
                           deal_II_space_dimension>(
        const hp::MappingCollection<deal_II_dimension, deal_II_space_dimension>
          &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<float> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::distributed::Vector<float>,
                           Vector<float>,
                           deal_II_space_dimension>(
        const hp::MappingCollection<deal_II_dimension, deal_II_space_dimension>
          &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::distributed::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<float> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::distributed::BlockVector<float>,
                           Vector<float>,
                           deal_II_space_dimension>(
        const hp::MappingCollection<deal_II_dimension, deal_II_space_dimension>
          &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::distributed::BlockVector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<float> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

#  ifdef DEAL_II_TRILINOS_WITH_TPETRA
      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::TpetraWrappers::Vector<float>,
                           Vector<float>,
                           deal_II_space_dimension>(
        const hp::MappingCollection<deal_II_dimension, deal_II_space_dimension>
          &,
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::TpetraWrappers::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<float> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);
#  endif

      template void
      integrate_difference<deal_II_dimension,
                           BlockVector<float>,
                           Vector<float>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const BlockVector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<float> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::Vector<float>,
                           Vector<float>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<float> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::distributed::Vector<float>,
                           Vector<float>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::distributed::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<float> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::distributed::BlockVector<float>,
                           Vector<float>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::distributed::BlockVector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<float> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);

#  ifdef DEAL_II_TRILINOS_WITH_TPETRA
      template void
      integrate_difference<deal_II_dimension,
                           LinearAlgebra::TpetraWrappers::Vector<float>,
                           Vector<float>,
                           deal_II_space_dimension>(
        const DoFHandler<deal_II_dimension, deal_II_space_dimension> &,
        const LinearAlgebra::TpetraWrappers::Vector<float> &,
        const Function<deal_II_space_dimension> &,
        Vector<float> &,
        const hp::QCollection<deal_II_dimension> &,
        const NormType &,
        const Function<deal_II_space_dimension> *,
        const double);
#  endif

    \}
#endif
  }

for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS)
  {
#if deal_II_dimension <= deal_II_space_dimension
    namespace VectorTools
    \{
      template double
      compute_global_error<deal_II_dimension,
                           deal_II_space_dimension,
                           Vector<float>>(
        const Triangulation<deal_II_dimension, deal_II_space_dimension> &,
        const Vector<float> &,
        const NormType &,
        const double);

      template double
      compute_global_error<deal_II_dimension,
                           deal_II_space_dimension,
                           Vector<double>>(
        const Triangulation<deal_II_dimension, deal_II_space_dimension> &,
        const Vector<double> &,
        const NormType &,
        const double);
    \}
#endif
  }
