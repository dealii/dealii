// ------------------------------------------------------------------------
//
// SPDX-License-Identifier: LGPL-2.1-or-later
// Copyright (C) 2010 - 2021 by the deal.II authors
//
// This file is part of the deal.II library.
//
// Part of the source code is dual licensed under Apache-2.0 WITH
// LLVM-exception OR LGPL-2.1-or-later. Detailed license information
// governing the source code and code contributions can be found in
// LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.
//
// ------------------------------------------------------------------------


for (VEC : VECTOR_TYPES; deal_II_dimension : DIMENSIONS)
  {
    template void DataOut_DoFData<deal_II_dimension, deal_II_dimension>::
      add_data_vector_internal<VEC>(
        const DoFHandler<deal_II_dimension> *,
        const VEC &,
        const std::vector<std::string> &,
        const DataVectorType,
        const std::vector<
          DataComponentInterpretation::DataComponentInterpretation> &,
        const bool);

    template void
    DataOut_DoFData<deal_II_dimension, deal_II_dimension>::add_data_vector<VEC>(
      const DoFHandler<deal_II_dimension> &,
      const VEC &,
      const DataPostprocessor<DoFHandler<deal_II_dimension>::space_dimension>
        &);


    template void DataOut_DoFData<deal_II_dimension, deal_II_dimension>::
      add_mg_data_vector<VEC>(const DoFHandler<deal_II_dimension> &,
                              const MGLevelObject<VEC> &,
                              const std::string &);

    template void
    DataOut_DoFData<deal_II_dimension, deal_II_dimension>::add_mg_data_vector<
      VEC>(const DoFHandler<deal_II_dimension> &,
           const MGLevelObject<VEC> &,
           const std::vector<std::string> &,
           const std::vector<
             DataComponentInterpretation::DataComponentInterpretation> &);



    // stuff needed for face data

    template void DataOut_DoFData<deal_II_dimension,
                                  deal_II_dimension - 1,
                                  deal_II_dimension,
                                  deal_II_dimension>::
      add_data_vector_internal<VEC>(
        const DoFHandler<deal_II_dimension> *,
        const VEC &,
        const std::vector<std::string> &,
        const DataVectorType,
        const std::vector<
          DataComponentInterpretation::DataComponentInterpretation> &,
        const bool);

    template void DataOut_DoFData<deal_II_dimension,
                                  deal_II_dimension - 1,
                                  deal_II_dimension,
                                  deal_II_dimension>::
      add_data_vector<VEC>(
        const DoFHandler<deal_II_dimension> &,
        const VEC &,
        const DataPostprocessor<DoFHandler<deal_II_dimension>::space_dimension>
          &);



    // things for DataOutRotation

#if deal_II_dimension < 3
    template void DataOut_DoFData<deal_II_dimension, deal_II_dimension + 1>::
      add_data_vector_internal<VEC>(
        const DoFHandler<deal_II_dimension> *,
        const VEC &,
        const std::vector<std::string> &,
        const DataVectorType,
        const std::vector<
          DataComponentInterpretation::DataComponentInterpretation> &,
        const bool);

    template void DataOut_DoFData<deal_II_dimension, deal_II_dimension + 1>::
      add_data_vector<VEC>(
        const DoFHandler<deal_II_dimension> &,
        const VEC &,
        const DataPostprocessor<DoFHandler<deal_II_dimension>::space_dimension>
          &);
#endif
  }



for (deal_II_dimension : DIMENSIONS)
  {
    template class DataOut_DoFData<deal_II_dimension, deal_II_dimension>;

#if deal_II_dimension < 3
    template class DataOut_DoFData<deal_II_dimension, deal_II_dimension + 1>;
    template class DataOut_DoFData<deal_II_dimension,
                                   deal_II_dimension,
                                   deal_II_dimension,
                                   deal_II_dimension + 1>;
#endif

#if deal_II_dimension >= 2
    template class DataOut_DoFData<deal_II_dimension,
                                   deal_II_dimension - 1,
                                   deal_II_dimension,
                                   deal_II_dimension>;
#endif

#if deal_II_dimension == 3
    template class DataOut_DoFData<1, 1, 1, 3>;
#endif

    namespace internal
    \{
      namespace DataOutImplementation
      \{
        template struct ParallelDataBase<deal_II_dimension, deal_II_dimension>;
      \}
    \}
  }
