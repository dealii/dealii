// ---------------------------------------------------------------------
//
// Copyright (C) 1998 - 2014 by the deal.II authors
//
// This file is part of the deal.II library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE at
// the top level of the deal.II distribution.
//
// ---------------------------------------------------------------------


//TODO[SP]: replace <deal_II_dimension> by <deal_II_dimension, deal_II_space_dimension>
// where applicable and move to codimension cases above also when applicable
for (VEC : SERIAL_VECTORS ; deal_II_dimension : DIMENSIONS; deal_II_space_dimension :  SPACE_DIMENSIONS)
  {
#if deal_II_dimension == deal_II_space_dimension

    namespace VectorTools \{

  template
    void point_value<deal_II_dimension> (
      const hp::DoFHandler<deal_II_dimension>&,
      const VEC&,
      const Point<deal_II_dimension>&,
      Vector<double>&);

  template
    double point_value<deal_II_dimension> (
      const hp::DoFHandler<deal_II_dimension>&,
      const VEC&,
      const Point<deal_II_dimension>&);

  template
    void point_value<deal_II_dimension> (
      const hp::MappingCollection<deal_II_dimension>&,
      const hp::DoFHandler<deal_II_dimension>&,
      const VEC&,
      const Point<deal_II_dimension>&,
      Vector<double>&);

  template
    double point_value<deal_II_dimension> (
      const hp::MappingCollection<deal_II_dimension>&,
      const hp::DoFHandler<deal_II_dimension>&,
      const VEC&,
      const Point<deal_II_dimension>&);

      template
        void point_difference<deal_II_dimension> (
          const DoFHandler<deal_II_dimension>&,
          const VEC&,
          const Function<deal_II_dimension>&,
          Vector<double>&,
          const Point<deal_II_dimension>&);

      template
        void point_difference<deal_II_dimension> (
          const Mapping<deal_II_dimension>&,
          const DoFHandler<deal_II_dimension>&,
          const VEC&,
          const Function<deal_II_dimension>&,
          Vector<double>&,
          const Point<deal_II_dimension>&);

      template
        void point_value<deal_II_dimension> (
          const DoFHandler<deal_II_dimension>&,
          const VEC&,
          const Point<deal_II_dimension>&,
          Vector<double>&);

      template
        double point_value<deal_II_dimension> (
          const DoFHandler<deal_II_dimension>&,
          const VEC&,
          const Point<deal_II_dimension>&);

      template
        void point_value<deal_II_dimension> (
          const Mapping<deal_II_dimension>&,
          const DoFHandler<deal_II_dimension>&,
          const VEC&,
          const Point<deal_II_dimension>&,
          Vector<double>&);

      template
        double point_value<deal_II_dimension> (
          const Mapping<deal_II_dimension>&,
          const DoFHandler<deal_II_dimension>&,
          const VEC&,
          const Point<deal_II_dimension>&);

      \}
#endif
  }



//TODO[SP]: replace <deal_II_dimension> by <deal_II_dimension, deal_II_space_dimension>
// where applicable and move to codimension cases above also when applicable
for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension :  SPACE_DIMENSIONS)
  {
    namespace VectorTools \{

#if deal_II_dimension == deal_II_space_dimension

      template
        void create_point_source_vector<deal_II_dimension>
        (const Mapping<deal_II_dimension>    &,
         const DoFHandler<deal_II_dimension> &,
         const Point<deal_II_dimension>      &,
         Vector<double>                      &);
      template
        void create_point_source_vector<deal_II_dimension>
        (const DoFHandler<deal_II_dimension> &,
         const Point<deal_II_dimension>      &,
         Vector<double>                      &);

      template
        void create_point_source_vector<deal_II_dimension>
        (const hp::MappingCollection<deal_II_dimension>    &,
         const hp::DoFHandler<deal_II_dimension> &,
         const Point<deal_II_dimension>      &,
         Vector<double>                      &);
      template
        void create_point_source_vector<deal_II_dimension>
        (const hp::DoFHandler<deal_II_dimension> &,
         const Point<deal_II_dimension>      &,
         Vector<double>                      &);
      template
        void create_point_source_vector<deal_II_dimension>
        (const Mapping<deal_II_dimension>    &,
         const DoFHandler<deal_II_dimension> &,
         const Point<deal_II_dimension>      &,
         const Point<deal_II_dimension>      &,
         Vector<double>                      &);
      template
        void create_point_source_vector<deal_II_dimension>
        (const DoFHandler<deal_II_dimension> &,
         const Point<deal_II_dimension>      &,
         const Point<deal_II_dimension>      &,
         Vector<double>                      &);

      template
        void create_point_source_vector<deal_II_dimension>
        (const hp::MappingCollection<deal_II_dimension>    &,
         const hp::DoFHandler<deal_II_dimension> &,
         const Point<deal_II_dimension>      &,
         const Point<deal_II_dimension>      &,
         Vector<double>                      &);
      template
        void create_point_source_vector<deal_II_dimension>
        (const hp::DoFHandler<deal_II_dimension> &,
         const Point<deal_II_dimension>      &,
         const Point<deal_II_dimension>      &,
         Vector<double>                      &);
#endif
      \}
  }
