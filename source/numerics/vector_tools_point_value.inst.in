// ------------------------------------------------------------------------
//
// SPDX-License-Identifier: LGPL-2.1-or-later
// Copyright (C) 2013 - 2020 by the deal.II authors
//
// This file is part of the deal.II library.
//
// Part of the source code is dual licensed under Apache-2.0 WITH
// LLVM-exception OR LGPL-2.1-or-later. Detailed license information
// governing the source code and code contributions can be found in
// LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.
//
// ------------------------------------------------------------------------


// TODO[SP]: replace <deal_II_dimension> by <deal_II_dimension,
// deal_II_space_dimension>
// where applicable and move to codimension cases above also when applicable
for (VEC : VECTOR_TYPES; deal_II_dimension : DIMENSIONS;
     deal_II_space_dimension : SPACE_DIMENSIONS)
  {
#if deal_II_dimension == deal_II_space_dimension

    namespace VectorTools
    \{

      template void
      point_value<deal_II_dimension>(
        const hp::MappingCollection<deal_II_dimension> &,
        const DoFHandler<deal_II_dimension> &,
        const VEC &,
        const Point<deal_II_dimension> &,
        Vector<VEC::value_type> &);

      template VEC::value_type
      point_value<deal_II_dimension>(
        const hp::MappingCollection<deal_II_dimension> &,
        const DoFHandler<deal_II_dimension> &,
        const VEC &,
        const Point<deal_II_dimension> &);

      template void
      point_difference<deal_II_dimension>(
        const DoFHandler<deal_II_dimension> &,
        const VEC &,
        const Function<deal_II_dimension, VEC::value_type> &,
        Vector<VEC::value_type> &,
        const Point<deal_II_dimension> &);

      template void
      point_difference<deal_II_dimension>(
        const Mapping<deal_II_dimension> &,
        const DoFHandler<deal_II_dimension> &,
        const VEC &,
        const Function<deal_II_dimension, VEC::value_type> &,
        Vector<VEC::value_type> &,
        const Point<deal_II_dimension> &);

      template void
      point_value<deal_II_dimension>(const DoFHandler<deal_II_dimension> &,
                                     const VEC &,
                                     const Point<deal_II_dimension> &,
                                     Vector<VEC::value_type> &);

      template VEC::value_type
      point_value<deal_II_dimension>(const DoFHandler<deal_II_dimension> &,
                                     const VEC &,
                                     const Point<deal_II_dimension> &);

      template void
      point_value<deal_II_dimension>(const Mapping<deal_II_dimension> &,
                                     const DoFHandler<deal_II_dimension> &,
                                     const VEC &,
                                     const Point<deal_II_dimension> &,
                                     Vector<VEC::value_type> &);

      template VEC::value_type
      point_value<deal_II_dimension>(const Mapping<deal_II_dimension> &,
                                     const DoFHandler<deal_II_dimension> &,
                                     const VEC &,
                                     const Point<deal_II_dimension> &);

    \}
#endif
  }



// TODO[SP]: replace <deal_II_dimension> by <deal_II_dimension,
// deal_II_space_dimension>
// where applicable and move to codimension cases above also when applicable
for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS)
  {
    namespace VectorTools
    \{

#if deal_II_dimension == deal_II_space_dimension

      template void
      create_point_source_vector<deal_II_dimension>(
        const Mapping<deal_II_dimension> &,
        const DoFHandler<deal_II_dimension> &,
        const Point<deal_II_dimension> &,
        Vector<double> &);
      template void
      create_point_source_vector<deal_II_dimension>(
        const DoFHandler<deal_II_dimension> &,
        const Point<deal_II_dimension> &,
        Vector<double> &);

      template void
      create_point_source_vector<deal_II_dimension>(
        const hp::MappingCollection<deal_II_dimension> &,
        const DoFHandler<deal_II_dimension> &,
        const Point<deal_II_dimension> &,
        Vector<double> &);
      template void
      create_point_source_vector<deal_II_dimension>(
        const Mapping<deal_II_dimension> &,
        const DoFHandler<deal_II_dimension> &,
        const Point<deal_II_dimension> &,
        const Point<deal_II_dimension> &,
        Vector<double> &);
      template void
      create_point_source_vector<deal_II_dimension>(
        const DoFHandler<deal_II_dimension> &,
        const Point<deal_II_dimension> &,
        const Point<deal_II_dimension> &,
        Vector<double> &);

      template void
      create_point_source_vector<deal_II_dimension>(
        const hp::MappingCollection<deal_II_dimension> &,
        const DoFHandler<deal_II_dimension> &,
        const Point<deal_II_dimension> &,
        const Point<deal_II_dimension> &,
        Vector<double> &);
#endif
    \}
  }
