// ------------------------------------------------------------------------
//
// SPDX-License-Identifier: LGPL-2.1-or-later
// Copyright (C) 2016 - 2024 by the deal.II authors
//
// This file is part of the deal.II library.
//
// Part of the source code is dual licensed under Apache-2.0 WITH
// LLVM-exception OR LGPL-2.1-or-later. Detailed license information
// governing the source code and code contributions can be found in
// LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.
//
// ------------------------------------------------------------------------


for (deal_II_dimension : DIMENSIONS; number : REAL_SCALARS)
  {
    template class SymmetricTensor<2, deal_II_dimension, number>;

    template class SymmetricTensor<4, deal_II_dimension, number>;

    template std::array<number, deal_II_dimension> eigenvalues(
      const SymmetricTensor<2, deal_II_dimension, number> &);

    template std::array<std::pair<number, Tensor<1, deal_II_dimension, number>>,
                        deal_II_dimension>
    eigenvectors<deal_II_dimension, number>(
      const SymmetricTensor<2, deal_II_dimension, number> &,
      const SymmetricTensorEigenvectorMethod);
  }

for (deal_II_dimension : DIMENSIONS; number : DIFFERENTIABLE_ADOLC_REAL_SCALARS)
  {
    template class SymmetricTensor<2, deal_II_dimension, number>;

    template class SymmetricTensor<4, deal_II_dimension, number>;
  }

for (deal_II_dimension : DIMENSIONS;
     number : DIFFERENTIABLE_TRILINOS_SACADO_REAL_SCALARS)
  {
    template class SymmetricTensor<2, deal_II_dimension, number>;

    template class SymmetricTensor<4, deal_II_dimension, number>;

    template std::array<number, deal_II_dimension> eigenvalues(
      const SymmetricTensor<2, deal_II_dimension, number> &);

    template std::array<std::pair<number, Tensor<1, deal_II_dimension, number>>,
                        deal_II_dimension>
    eigenvectors<deal_II_dimension, number>(
      const SymmetricTensor<2, deal_II_dimension, number> &,
      const SymmetricTensorEigenvectorMethod);
  }

for (deal_II_dimension : DIMENSIONS; number : COMPLEX_SCALARS)
  {
    template class SymmetricTensor<2, deal_II_dimension, number>;

    template class SymmetricTensor<4, deal_II_dimension, number>;
  }


for (number : REAL_SCALARS)
  {
    template SymmetricTensor<4, 3, number> invert(
      const SymmetricTensor<4, 3, number> &t);
  }

for (number : DIFFERENTIABLE_ADOLC_REAL_SCALARS)
  {
    template SymmetricTensor<4, 3, number> invert(
      const SymmetricTensor<4, 3, number> &t);
  }

for (number : DIFFERENTIABLE_TRILINOS_SACADO_REAL_SCALARS)
  {
    template SymmetricTensor<4, 3, number> invert(
      const SymmetricTensor<4, 3, number> &t);
  }
