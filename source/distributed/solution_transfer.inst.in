// ---------------------------------------------------------------------
//
// Copyright (C) 2010 - 2020 by the deal.II authors
//
// This file is part of the deal.II library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE.md at
// the top level directory of deal.II.
//
// ---------------------------------------------------------------------



for (deal_II_dimension : DIMENSIONS; deal_II_space_dimension : SPACE_DIMENSIONS)
  {
    namespace parallel
    \{
      namespace distributed
      \{
#if deal_II_dimension <= deal_II_space_dimension
        template class SolutionTransfer<deal_II_dimension,
                                        ::dealii::Vector<double>,
                                        deal_II_space_dimension>;
        template class SolutionTransfer<
          deal_II_dimension,
          ::dealii::LinearAlgebra::distributed::Vector<double>,
          deal_II_space_dimension>;
        template class SolutionTransfer<
          deal_II_dimension,
          ::dealii::LinearAlgebra::distributed::Vector<float>,
          deal_II_space_dimension>;
        template class SolutionTransfer<
          deal_II_dimension,
          ::dealii::LinearAlgebra::distributed::BlockVector<double>,
          deal_II_space_dimension>;
        template class SolutionTransfer<
          deal_II_dimension,
          ::dealii::LinearAlgebra::distributed::BlockVector<float>,
          deal_II_space_dimension>;


#  ifdef DEAL_II_WITH_PETSC
        template class SolutionTransfer<deal_II_dimension,
                                        PETScWrappers::MPI::Vector,
                                        deal_II_space_dimension>;
        template class SolutionTransfer<deal_II_dimension,
                                        PETScWrappers::MPI::BlockVector,
                                        deal_II_space_dimension>;
#  endif

#  ifdef DEAL_II_WITH_TRILINOS
        template class SolutionTransfer<deal_II_dimension,
                                        TrilinosWrappers::MPI::Vector,
                                        deal_II_space_dimension>;
        template class SolutionTransfer<deal_II_dimension,
                                        TrilinosWrappers::MPI::BlockVector,
                                        deal_II_space_dimension>;
#  endif

#endif
      \}
    \}
  }
