// ---------------------------------------------------------------------
//
// Copyright (C) 2016 by the deal.II authors
//
// This file is part of the deal.II library.
//
// The deal.II library is free software; you can use it, redistribute
// it, and/or modify it under the terms of the GNU Lesser General
// Public License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full text of the license can be found in the file LICENSE at
// the top level of the deal.II distribution.
//
// ---------------------------------------------------------------------



for (deal_II_dimension : DIMENSIONS;
        deal_II_space_dimension: SPACE_DIMENSIONS)
{
    namespace internal
    \{
    namespace MGTransfer
    \{

#if deal_II_dimension <= deal_II_space_dimension
    template
    void fill_copy_indices<deal_II_dimension, deal_II_space_dimension>(
        const dealii::DoFHandler<deal_II_dimension,deal_II_space_dimension>&,
        const MGConstrainedDoFs*,
        std::vector<std::vector<std::pair<types::global_dof_index, types::global_dof_index> > > &,
        std::vector<std::vector<std::pair<types::global_dof_index, types::global_dof_index> > > &,
        std::vector<std::vector<std::pair<types::global_dof_index, types::global_dof_index> > > &);
#endif
    \}
    \}
}


for (deal_II_dimension : DIMENSIONS)
{
    namespace internal
    \{
    namespace MGTransfer
    \{

    template
    unsigned int
    compute_shift_within_children<deal_II_dimension>(const unsigned int,
            const unsigned int,
            const unsigned int);
    \}
    \}
}

for (S : REAL_SCALARS)
{
    namespace internal
    \{
    namespace MGTransfer
    \{

    template
    struct ElementInfo<S>;
    \}
    \}
}

for (deal_II_dimension : DIMENSIONS; S : REAL_SCALARS)
{
    namespace internal
    \{
    namespace MGTransfer
    \{

    template
    void setup_transfer<deal_II_dimension>(const dealii::DoFHandler<deal_II_dimension>&,
                                           const MGConstrainedDoFs*,
                                           ElementInfo<S>&,
                                           std::vector<std::vector<unsigned int> >&,
                                           std::vector<std::vector<std::pair<unsigned int,unsigned int> > >&,
                                           std::vector<unsigned int>&,
                                           std::vector<std::vector<std::vector<unsigned short> > >&,
                                           std::vector<std::vector<S> >&,
                                           std::vector<std::vector<std::pair<unsigned int, unsigned int> > >&,
                                           MGLevelObject<LinearAlgebra::distributed::Vector<S> >&);
    \}
    \}
}
